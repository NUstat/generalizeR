filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/utils.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/libraries.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
?daisy
source("~/generalizeR/R/stratify.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
is_odd <- function(x) {
assert_that(is.numeric(x), length(x) == 1)
x%%2 == 1
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
is_odd <- function(x) {
assert_that(is.numeric(x), length(x) == 1)
x%%2 == 1
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
is_empty <- function(x) {
assertthat::assert_that(not_empty(x))
}
on_failure(is_empty) <- function(call, env) {
"You must specify the number of units that you wish to recruit when running the unguided version of this function."
}
is_empty()
x<-NULL
x
noNA(x)
noNA(a)
noNA(b)
x<-NA
noNA(x)
?is_empty
is_empty(NULL)
is_empty(list())
is_empty(list(NULL))
?not_empty
not_empty(x)
x
not_empty(numeric())
not_empty(mtcars[0, ])
not_empty(mtcars[, 0])
on_failure(is_empty) <- function(call, env) {
"You must specify the number of units that you wish to recruit when running the unguided version of this function."
}
mtcars[, 0]
mtcars[0, 0]
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
x<-NULL
not_empty(x)
source("~/generalizeR/R/recruit.R", echo=TRUE)
not_empty(x)
rec_output <- recruit(strat_output, guided = FALSE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
rm(list = ls())
strat_output
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
rec_output <- recruit(strat_output, guided = FALSE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
?Kmeans_rcpp
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
install.packages("clusterR")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
?on_failure
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
library(assertthat)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
detach("package:assertthat", unload=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
unloadNamespace("assertthat")
?dbplyr
x = tibble(1)
x = dplyr::tibble(1)
class(x)
inherits(x, "data.frame")
is.data.frame(x)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
library(magrittr)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
x = nULL
x
x = NULL
x
class(x)
is.null(x)
assertthat::assert_that(is.null(x))
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
?not_empty
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
library(assertthat)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
library(assertthat)
stratify()
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify()
?repeat
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE)
library(generalizeR)
stratify(ipeds, guided = FALSE)
library(generalizeRdata)
stratify(ipeds, guided = FALSE)
?across
?is_character
?as_factor
?forcats
?all_of
?summarise_all
?arrange
?everything
?unique
?group_by
?left_join
?unite
?select
?count
?add_row
?tibble_row
?contains
?pivot_longer
?case_when
?colnames
?append
?kbl
?kable_styling
?round
?is.empty
?is_empty
?menu
?`colnames<-`
?rownames_to_column
?if_any
?is.na
?drop_na
?is.factor
?plasma
?fct_reorder
?summarise
?negate
?viridis
?suppressWarnings
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds, guided = FALSE, n_strata = 4)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"))
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "a")
?is_empty
?setdiff
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total1", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total1", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch1")
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("state", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
inference_pop
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("st", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
inference_pop$st
inference_pop$sch_name
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("sch_name", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop)
?purrr
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop)
stratify(inference_pop)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop)
stratify(inference_pop)
?scan
x= c(1,2, 3)
x
x[2.5]
x[4]
1:2 %in% x
all(1:2 %in% x)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop)
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
?n
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
library(generalizeRdata)
stratify(ipeds)
library(magrittr)
library(ggplot2)
library(rlang)
stratify(ipeds)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
?neage
?negate
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
strat_output <- stratify(ipeds)
recruit(strat_output)
library(generalizeR)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
utils::menu(
choices = c("Yes", "No"),
title = cat("Would you like to save the recruitment lists as .csv files?")
)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
?switch
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
library(generalizeR)
library(generalizeRdata)
library(magrittr)
library(rlang)
library(ggplot2)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
weighting(target_data, "trial", selection_covariates)
weighting(target_data, "trial", covariates = selection_covariates)
