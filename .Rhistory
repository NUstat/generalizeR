library(tidyverse)
library(janitor)
library(cluster)
library(ClusterR)
library(kableExtra)
library(generalizeRdata)
library(viridisLite)
library(viridis)
library(janitor)
library(ggrepel)
library(ggnewscale)
library(lazyeval)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
output$heat_data_kable
recruit_output = recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_kable
recruit_output <- recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_kable
recruit_output$recruit_kable
recruit(output, guided = FALSE, number = 40)
recruit(output, guided = FALSE, number = 40)
recruit_output <- recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_table
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/libraries.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = ncessch)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
library(devtools)
install_github("NUstat/generalizeR")
recruit(output, guided = FALSE, number = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, number = 40)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output, guided = FALSE, n = 40)
recruit(output, guided = FALSE, n = 40)
n
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, sample_size = 40)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40.5)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40.5)
else {
if(is.null(sample_size)) {
stop("You must specify the number of units that you wish to recruit.")
}
if(!(sample_size %in% valid_inputs)) {
errorMsg = paste("The number of units you wish to recruit must be an integer between 1 and \nthe total number of units in your population (",
pop_size,
").",
sep = "")
stop(errorMsg)
}
if(!inherits(x, "generalizer_output")) {
stop("Argument 'x' must be an object of class \"generalizer_output\", \ncreated by running stratify().")
}
}
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40.5)
recruit(output, guided = FALSE, sample_size = 0)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = recruit_output$recruit_data
target_data = recruit_output$recruit_data
# Store stratum sizes
stratum_sizes = target_data %>%
group_by(Stratum) %>%
count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = c(20, 4, 5, 11) # c(20, 4, 5, 11) is optimal.
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the trial, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
trial_data = target_data %>%
group_by(Stratum) %>%
nest() %>%
ungroup() %>%
mutate(n = stratum_sample_sizes) %>%
mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = trial_data %>%
group_by(Stratum) %>%
nest() %>%
ungroup() %>%
mutate(samp = purrr::map(.x = data,
.f = function(.x) slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
mutate(trial = ifelse(ncessch %in% trial_data$ncessch, 1, 0),
treatment = case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -rank, -ncessch)
usethis::use_tidy_description()
?person
usethis::use_tidy_description()
?dplyr
pkgdown::build_site()
devtools::build_readme()
?declare_ra
source("~/STEPP Center/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/libraries.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
x = stratify(ipdes)
x = stratify(ipeds)
summary(x)
x
x$pop_data_by_stratum
ipeds
x$pop_data_by_stratum
source("~/STEPP Center/generalizeR/R/stratify_basic.R", echo=TRUE)
stratify(ipeds)
x = stratify(ipeds)
3942+2948
length(ipeds)
dim(ipeds)
2498+3942
stratify(ipeds)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(ipeds)
stratify(ipeds)
?menu
x$pop_data_by_stratum
stratify(ipeds)
?scan
?data.frame
typeof(data.frame(1))
class(data.frame(a = 1))
class(1L)
is.integer(2)
is.integer(2L)
stratify(ipeds)
?KMeans_rcpp
KMeans_rcpp
class(2)
class(2.5)
integer(3)
is.integer(3)
2 %% 1 == 0
2.5 %% 1 == 0
a %% 1 == 0
'a' %% 1 == 0
?tryCatch
n_strata = 2.5
tryCatch(
{
n_strata %% 1 == 0
},
error = function(cond) {
message("The number of strata must be an integer greater than or equal to 2.")
stop()
}
)
n_strata = 2
tryCatch(
{
n_strata %% 1 == 0
},
error = function(cond) {
message("The number of strata must be an integer greater than or equal to 2.")
stop()
}
)
n_strata = "a"
tryCatch(
{
n_strata %% 1 == 0
},
error = function(cond) {
message("The number of strata must be an integer greater than or equal to 2.")
stop()
}
)
library(generalizeRdata)
library(generalizeR)
source("~/generalizeR/R/stratify/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify/libraries.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_guided.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_unguided.R", echo=TRUE)
stratify(ipeds)
source("~/generalizeR/R/stratify/stratify_unguided.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_guided.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_basic.R", echo=TRUE)
stratify(ipeds)
test = stratify(ipeds)
devtools::check()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::check()
.Last.error.trace
devtools::check()
source("~/generalizeR/R/stratify/stratify_unguided.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_guided.R", echo=TRUE)
source("~/generalizeR/R/stratify/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/round_preserve_sum.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/make_var_overview.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/make_cont_data_tbl.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/check_factor_levels.R", echo=TRUE)
devtools::check()
devtools::document()
source("~/generalizeR/R/stratify/helper functions/round_preserve_sum.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/make_var_overview.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/check_factor_levels.R", echo=TRUE)
source("~/generalizeR/R/stratify/helper functions/make_cont_data_tbl.R", echo=TRUE)
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::document()
fls = paste(dir(pattern="R", recursive=TRUE), collapse=" ")
cat(strwrap(sprintf("Collate: %s", fls), exdent=4), sep="\n")
fls = paste(dir(pattern="R", recursive=TRUE), collapse=" ")
fls
fls = paste(dir(pattern="R", recursive=TRUE), collapse=" ")
fls
devtools::document()
source("~/generalizeR/R/stratify_unguided.R", echo=TRUE)
source("~/generalizeR/R/stratify_guided.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
devtools::document()
?load_all
devtools::check()
devtools::check()
.Last.error.trace
devtools::document()
devtools::check()
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/stratify_guided.R", echo=TRUE)
source("~/generalizeR/R/stratify_unguided.R", echo=TRUE)
devtools::document()
devtools::check()
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
install_github("NUstat/generalizeR")
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
stratify(ipeds)
inference_pop
stratify(ipeds, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "unitid")
ipeds
names(ipeds)
stratify(ipeds, guided = FALSE, n_strata = 4, variables = c("pct_low_inc", "pct_low_mid_inc", "pct_mid_inc", "pct_mid_high_inc"), idvar = "unitid")
source("R/stratify_unguided.R")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("R/check_factor_levels.R")
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
getwd()
stratify_unguided()
stratify(ipeds)
?clean_names
source("~/generalizeR/R/make_cont_data_tbl.R", echo=TRUE)
stratify(ipeds)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
stratify(ipeds)
?daisy
source("~/generalizeR/R/libraries.R", echo=TRUE)
stratify(ipeds)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
getwd()
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
getwd()
stratify_unguided()
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
devtools::document()
devtools::check()
.Last.error
stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
getwd()
stratify_unguided(ipeds, n_strata = 4, variables = c("pct_female", "pct_black"), idvar = "unitid")
source("~/generalizeR/R/stratify.R", echo=TRUE)
