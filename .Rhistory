#' @importFrom janitor clean_names
#' @importFrom ggplot2 ggplot aes geom_bar xlab labs geom_histogram geom_text geom_label geom_hline scale_fill_gradientn scale_x_discrete expand_limits geom_tile element_blank element_text theme
#' @importFrom ggthemes theme_base
#' @importFrom ggrepel geom_label_repel
#' @importFrom ggnewscale new_scale
#' @importFrom viridis viridis turbo plasma
#' @importFrom kableExtra kbl kable_styling
#' @importFrom tidyr pivot_longer unite_
#' @importFrom dplyr count arrange filter mutate summarise_all summarize_if left_join group_by select select_if all_of mutate_all case_when bind_rows bind_cols distinct everything
#' @importFrom tibble tibble_row add_row tibble
#' @importFrom ClusterR KMeans_rcpp
#' @importFrom purrr map_dbl map_df negate
#' @importFrom magrittr %>%
#' @importFrom cluster daisy
#' @importFrom stringr str_sub
#' @importFrom grid unit
#' @importFrom tidyselect contains
#' @references
#' Tipton, E. (2014). Stratified sampling using cluster analysis: A sample selection strategy for improved generalizations from experiments. *Evaluation Review*, *37*(2), 109-139.
#'
#' Tipton, E. (2014). How generalizable is your experiment? An index for comparing experimental samples and populations. *Journal of Educational and Behavioral Statistics*, *39*(6), 478-501.
#' @examples
#' \donttest{
#' \dontrun{
#' # To get sample data; must first be installed using install_github("katiecoburn/generalizeRdata")
#' library(generalizeRdata)
#'
#' # Guided:
#' stratify(ipeds)
#'
#' # Not guided:
#' stratify(ipeds, guided = FALSE, n_strata = 4,
#'    variables = c("pct_female", "pct_white"), idnum = "unitid")
#' }
#' }
#' @md
select.list_CUSTOMIZED <- function(choices, preselect = NULL, multiple = FALSE, title = NULL,
graphics = getOption("menu.graphics")){
if (!interactive())
stop("select.list() cannot be used non-interactively")
if (!is.null(title) && (!is.character(title) || length(title) !=
1))
stop("'title' must be NULL or a length-1 character vector")
if (isTRUE(graphics)) {
if (.Platform$OS.type == "windows" || .Platform$GUI ==
"AQUA")
return(.External2(C_selectlist, choices, preselect,
multiple, title))
else if (graphics && capabilities("tcltk") && capabilities("X11") &&
suppressWarnings(tcltk::.TkUp))
return(tcltk::tk_select.list(choices, preselect,
multiple, title))
}
if (!multiple) {
res <- menu(choices, FALSE, title)
if (res < 1L || res > length(choices))
return("")
else return(choices[res])
}
else {
nc <- length(choices)
if (length(title) && nzchar(title[1L]))
cat(title, "\n", sep = "")
def <- if (is.null(preselect))
rep.int(FALSE, nc)
else choices %in% preselect
op <- paste0(format(seq_len(nc)), ": ", ifelse(def, "+",
" "), " ", choices)
if (nc > 10L) {
fop <- format(op)
nw <- nchar(fop[1L], "w") + 2L
ncol <- getOption("width")%/%nw
if (ncol > 1L)
op <- paste0(fop, c(rep.int("  ", ncol - 1L),
"\n"), collapse = "")
cat("", op, sep = "\n")
}
else cat("", op, "", sep = "\n")
cat(gettext("Enter one or more numbers separated by spaces and then ENTER, or 0 to cancel.\n"))
repeat {
res <- tryCatch(scan("", what = 0, quiet = TRUE,
nlines = 1), error = identity)
if (!inherits(res, "error"))
break
cat(gettext("Invalid input, please try again.\nEnter one or more numbers separated by spaces and then ENTER, or 0 to cancel.\n"))
}
if (any(res == 0))
return(character())
if (!is.null(preselect))
res <- c(which(def), res)
res <- unique(res)
res <- sort(res[1 <= res & res <= nc])
return(choices[res])
}
}
stratify <- function(data, guided = TRUE, n_strata = NULL, variables = NULL,
idnum = NULL, seed = 7835){
skim_variable <- skim_type <- variable <- NULL
type <- clusterID <- n <- mn <- deviation <- NULL
data_name <- deparse(substitute(data))
blankMsg <- sprintf("\r%s\r", paste(rep(" ", getOption("width") - 1L), collapse = " "));
# This is the guided part of the function.
if(guided == TRUE){
## Check ##
if(!is.null(n_strata) | !is.null(variables) | !is.null(idnum)){
stop(simpleError("Don't specify n_strata, variables, or idnum as arguments if you are running the guided version of this function."))
}
cat(bold("\nWelcome to stratify! \n"))
cat("\nIf you want to adjust or restrict your inference population \n(e.g., if you are interested in only one location, etc.), \nmake sure that you have altered the data frame appropriately. \nIf you need to alter your data frame, you can exit this \nfunction, use ", blue$bold("dplyr::filter()"), ", and then return.\n", sep = "")
cat(bold("\nTo store your results, make sure you assign \nthis function to an object.\n\n"))
if(menu(choices = c("Yes", "No"), title = cat("I have assigned this function to an object and wish to proceed:")) == 1){
}else{
stop(simpleError(blankMsg))
}
cat("Your chosen inference population is the '",
data_name, "' dataset.", sep = "")
cat("\n")
cat("\n")
is_valid_variable_name <- FALSE
while(is_valid_variable_name == FALSE) {
idnum <- readline(prompt = "Enter the name of the ID Variable in your dataset: ")
## Check ##
if(!idnum %in% names(data)) {
cat(red("ERROR: We could not find that variable. Please make sure your \ndataset contains an ID variable."))
next
}
is_valid_variable_name <- TRUE
}
variables_are_correct <- 0
data_guided <- data %>% select(-all_of(idnum))
# this is a helper function that should be moved --------------------------
make_var_overview <- function(dataset, print_to_console = FALSE){
vars <- dataset %>% names()
type <- dataset %>% sapply(class)
num_levels <- dataset %>% sapply(nlevels)
var_overview <- cbind(vars, type, num_levels) %>% data.frame() %>% arrange(type)
rownames(var_overview) <- NULL
colnames(var_overview) <- c("Variable", "Type", "Levels")
var_overview %>%
kbl(caption = "Variable Overview",
align = "l") %>%
kable_styling(c("striped", "hover"), fixed_thead = TRUE) %>%
print()
if(print_to_console == TRUE){
print(var_overview, row.names = FALSE)
}
}
# end of helper function --------------------------------------------------
make_var_overview(data_guided)
while(variables_are_correct != 1){
cat("\nIn the Viewer pane to the right you will find a table that displays each \nvariable in your dataset along with its object type and number of levels \n(only relevant for factor variables). ",
yellow$bold("Please note that any character \nvariables that may have been present in your dataset have been \nautomatically converted to factor variables.\n"),
sep = "")
names <- names(data_guided)
variables <- select.list_CUSTOMIZED(choices = names,
title = cat("\nYou're now ready to select your stratification variables. The following \nare the variables available in your dataset. Which key variables do you \nthink may explain variation in your treatment effect? Typically, studies \ninclude 4-6 variables for stratification.", yellow$bold("You must choose at least 2 \nvariables and you may not choose any factor variables with more than 4 \nlevels.\n")),
graphics = FALSE, multiple = TRUE)
if(length(variables) >= 2L){
data_subset <- data_guided %>% select(all_of(variables))
}
else{
## Check ##
cat(red("ERROR: Invalid selection. You must select at least 2 stratification variables.\n"))
next
}
factor_levels_over_4 <- (data_subset %>% select_if(is.factor) %>% sapply(nlevels) > 4L) %>%
which() %>% names()
if(!is_empty(factor_levels_over_4)){
cat(red("ERROR: The following factor variables have more than 4 levels:\n"),
paste(blue$bold(factor_levels_over_4), collapse = ", "),
red("\n4 is the maximum number of levels this function will allow a factor to have."),
red("\nPlease exit out of this function (Press 'Esc') and re-code your desired factor"),
red("\nlevels from these variables as dummy variables (see the package 'fastDummies').\n"), sep = "")
next
}
cat("You have selected the following stratifying variables:\n",
paste(blue$bold(colnames(data_subset)), collapse = ", "),
"\n\n",
sep = "")
make_var_overview(data_subset, print_to_console = TRUE)
if(menu(choices = c("Yes", "No"), title = cat("\nIs this correct?")) == 1){
variables_are_correct <- 1
}else{
variables_are_correct <- 0
}
}
# we don't still need the cat data section right? because they  --------
# would have been converted to factors?
# cat_data <- data_subset %>% select_if(is.factor)
# cat_data_vars <- names(cat_data)
# if(dim(cat_data)[2] >= 1){
#   cat_data_plot <- data.frame(cat_data) %>% na.omit()
#   cat("Please review the descriptive statistics of your categorical variables (factors).\n",
#       "Bar charts and tables for each variable will also be printed in the Plots and \nViewer panes to the right.\n", sep = "")
#
#   n_cat_vars <- ncol(cat_data_plot)
#   fill_colors_cat <- plasma(n_cat_vars, alpha = 0.7, direction = sample(c(-1, 1), size = 1)) %>%
#     sample()
#   outline_colors_cat <- turbo(n_cat_vars) %>% sample()
#
#   for(i in 1:n_cat_vars){
#     var_name <- cat_data_vars[i]
#     levels(cat_data_plot[[var_name]]) <- str_wrap(levels(cat_data_plot[[var_name]]), width = 10)
#     barfig <- cat_data_plot %>%
#       group_by(across(all_of(var_name))) %>%
#       summarise(count = n()) %>%
#       mutate(ordered_factor = fct_reorder(.[[var_name]], count)) %>%
#       ggplot(aes(x = ordered_factor, y = count)) +
#       geom_col(fill = fill_colors_cat[i],
#                color = outline_colors_cat[i]) +
#       theme_minimal() +
#       xlab(var_name) +
#       labs(title = paste("Bar Chart of", var_name))
#     print(barfig)
#     par(ask = TRUE)
#     cat("\nNumber of Observations in Levels of Factor ",
#         paste(blue$bold(var_name)),
#         ":\n",
#         sep = "")
#     cat_data_table <- table(cat_data_plot[,i])
#     cat_data_table %>% print()
#     cat_data_table %>%
#       kbl(col.names = c("Level", "Frequency"),
#           caption = paste("Number of Observations in Levels of Factor ", var_name),
#           align = "l") %>%
#       kable_styling(c("striped", "hover")) %>%
#       print()
#   }
# }
# end of cat data ---------------------------------------------------------
cont_data <- data_subset %>%
select_if(negate(is.factor))
cont_data_vars <- names(cont_data)
if(dim(cont_data)[2] >= 1L){
cat("\nPlease review the descriptive statistics of your continuous variables. Histograms \nand tables for each variable will also be printed in the Plots and Viewer panes \nto the right. \n\n")
n_cont_vars <- ncol(cont_data)
fill_colors_cont <- viridis(n_cont_vars, alpha = 0.7, direction = sample(c(-1, 1), size = 1)) %>%
sample()
outline_colors_cont <- turbo(n_cont_vars) %>% sample()
for(i in 1:n_cont_vars){
cont_data_plot <- cont_data %>% na.omit() %>% data.frame()
suppressWarnings(
suppressMessages(
hist <- ggplot(data = cont_data_plot, aes(x = cont_data_plot[,i])) +
geom_histogram(bins = 30,
fill = fill_colors_cont[i],
color = outline_colors_cont[i]) +
theme_minimal() +
xlab(cont_data_vars[i]) +
labs(title = paste("Histogram of", cont_data_vars[i]))
)
)
print(hist)
par(ask = TRUE)
}
sumstats <- cont_data %>%
na.omit() %>%
map_df(function(x){
tibble(min = min(x), pct50 = median(x), max = max(x), mean = mean(x), sd = sd(x))
}) %>%
mutate_all(round, digits = 3) %>%
mutate(variable = cont_data_vars) %>%
select(variable, everything()) %>%
clean_names() %>%
data.frame()
sumstats %>% print(row.names = FALSE)
sumstats %>% kbl() %>% kable_styling(c("striped", "hover")) %>% print()
}
par(ask = FALSE)
cat("\nStratification will help you develop a recruitment plan so that your study will \nresult in an unbiased estimate of the ", bold("average treatment effect (ATE)"), ". Without \nusing strata, it is easy to end up with a sample that is very different from your \ninference population. \n\nGeneralization works best when strata are ", bold("homogeneous"), ". That means units within \neach stratum are almost identical in terms of relevant variables.\n\n", sep = "")
cat("Enter the number of strata in which you wish to divide your population. Typically, ",
bold("\nthe more strata"),
",",
bold("the better"),
"; with fewer strata, units in each stratum are no longer \nidentical. However, increasing ",
"the number of strata uses more resources, because \nyou must sample a given number of units ",
"from each stratum. Choosing 4-6 strata is \ncommon. \n\nTry a few numbers and choose the 'best' one for you.",
sep = "")
n_strata <- suppressWarnings(as.numeric(readline(prompt = "# of strata: ")))
## Catch ##
if(is.na(n_strata) || n_strata <= 1){
cat(red("ERROR: The number of strata must be a single positive integer greater than 1.\n"))
next
}
if(n_strata%%1==0){
n_strata <- round(n_strata)
}
cat(blue$bold("Congratulations, you have successfully grouped your data into", n_strata, "strata!\n"))
readline(prompt = "Press [enter] to view the results")
if(menu(choices = c("Yes", "No"), title = cat("\nWould you like to go back and specify a different number of strata? If you specify \n'No' the stratification process will end and you can proceed to use the output in \n'recruit()' provided that it has been assigned to an object.")) == 2){
satisfied <- 1
}else{
satisfied <- 0
}
}
# here is where non-guided starts. Feed into stratify_basic
stratify_basic(data = data, n_strata = n_strata, variables = colnames(data_subset),
idnum = id_num, seed = 7835)
overall_output <- overall_output
class(overall_output) <- c("generalizer_output")
return(invisible(overall_output))
}
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
source('~/Documents/STEPP/testdoc.R')
library(devtools)
library(tidyverse)
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
library(gridExtra)
library(usmap)
library(janitor)
library(grid)
library(cluster)
library(ClusterR)
library(crayon)
library(kableExtra)
# 1. Get your inference population (technically step 2)
selection_vars <- c("pct_female", "pct_black_or_african_american", "pct_free_and_reduced_lunch")
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars))
inference_pop <- inference_pop %>%
mutate(factor = as.factor(sample(1:5, nrow(inference_pop), replace = T)))
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
summary(stratify_results)
stratify_results <- stratify(inference_pop, guided=T, n_strata = 4, variables = selection_vars,idnum = "ncessch")
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify2.R')
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_test <- stratify(inference_pop, guided=T)
stratify_results <- stratify(inference_pop, guided=T, n_strata = 4, variables = selection_vars,idnum = "ncessch")
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch")
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_test <- stratify(inference_pop, guided=T)
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
source('~/Documents/STEPP/generalizeR/R/stratify.R')
source('~/Documents/STEPP/generalizeR/R/stratify.R')
stratify_test <- stratify(inference_pop, guided=T)
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
summary(stratify_results)
stratify_results
stratify_test <- stratify(inference_pop, guided=F)
sample <- tibble(ncessch = c(stratify_results$recruitment_lists[[1]]$ncessch[1:20],
stratify_results$recruitment_lists[[2]]$ncessch[1:4],
stratify_results$recruitment_lists[[3]]$ncessch[1:6],
stratify_results$recruitment_lists[[4]]$ncessch[1:11]))
gen_results <- assess_wrap(sample,inference_pop,join_var = "ncessch")
library(devtools)
library(tidyverse)
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
library(gridExtra)
library(usmap)
library(janitor)
library(grid)
library(cluster)
library(ClusterR)
library(crayon)
library(kableExtra)
# 1. Get your inference population (technically step 2)
selection_vars <- c("pct_female", "pct_black_or_african_american", "pct_free_and_reduced_lunch")
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
source('~/Documents/STEPP/generalizeR/R/stratify.R')
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars))
inference_pop <- inference_pop %>%
mutate(factor = as.factor(sample(1:5, nrow(inference_pop), replace = T)))
stratify_test <- stratify(inference_pop, guided=T, seed = 1234)
library(devtools)
library(tidyverse)
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
library(gridExtra)
library(usmap)
library(janitor)
library(grid)
library(cluster)
library(ClusterR)
library(crayon)
library(kableExtra)
library(crayon)
library(tidyverse)
library(viridisLite)
library(viridis)
library(ggrepel)
library(ggnewscale)
# 1. Get your inference population (technically step 2)
selection_vars <- c("pct_female", "pct_black_or_african_american", "pct_free_and_reduced_lunch")
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars))
inference_pop <- inference_pop %>%
mutate(factor = as.factor(sample(1:5, nrow(inference_pop), replace = T)))
stratify_test <- stratify(inference_pop, guided=T, seed = 1234)
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F, seed = 1234)
one <- stratify_results
stratify_results <- stratify(inference_pop, guided=F, n_strata = 4, variables = selection_vars,idnum = "ncessch", verbose = F)
summary(one)
summary(stratify_results)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
source('~/Documents/STEPP/generalizeR/R/stratify_basic.R')
library(devtools)
library(tidyverse)
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
library(gridExtra)
library(usmap)
library(janitor)
library(grid)
library(cluster)
library(ClusterR)
library(crayon)
library(kableExtra)
library(crayon)
library(tidyverse)
library(viridisLite)
library(viridis)
library(ggrepel)
library(ggnewscale)
# 1. Get your inference population (technically step 2)
selection_vars <- c("pct_female", "pct_black_or_african_american", "pct_free_and_reduced_lunch")
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars))
inference_pop <- inference_pop %>%
mutate(factor = as.factor(sample(1:5, nrow(inference_pop), replace = T)))
test <- stratify(inference_pop, guided = T)
# 1. Get your inference population (technically step 2)
selection_vars <- c("pct_female", "pct_black_or_african_american", "pct_free_and_reduced_lunch")
id_vars <- c("ncessch", "lstreet", "lzip")
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars), all_of(id_vars))
id_vars <- "ncessch"
inference_pop <- cc %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes") %>%
select(ncessch, all_of(selection_vars), all_of(id_vars))
inference_pop <- inference_pop %>%
mutate(factor = as.factor(sample(1:5, nrow(inference_pop), replace = T)))
stratify_results <- stratify(inference_pop, guided = F, n_strata = 4, variables = selection_vars, idnum = id_vars)
stratify_results
summary(stratify_results)
View(stratify_results)
stratify_results$recruitment_lists[[1]]
stratify_results$recruitment_lists[[1]] %>% view()
stratify_results$x2 %>% view()
View(stratify_results)
stratify_results$x2 %>% view()
stratify_results$data_omitted %>% view()
stratify_results$heat_data_simple %>% view()
View(stratify_results)
write.csv(stratify_results$data_omitted)
test <- stratify(inference_pop, guided = T, n_strata =4)
test <- stratify(inference_pop, guided = F, n_strata =4)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
test <- stratify(inference_pop, guided = T)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
test <- stratify(inference_pop, guided = T)
source('~/Documents/STEPP/generalizeR/R/stratify.R')
test <- stratify(inference_pop, guided = T)
git checkout master
