dtypes(inference_pop)
str(inference_pop)
data = inference_pop
data %>%
dplyr::select_if(is.factor) %>%
sapply(nlevels) %>%
`>`(maxlevels) %>%
which() %>%
names()
.check.factor.levels <- function(data,
maxlevels = 4L) {
invalid_factors <- data %>%
dplyr::select_if(is.factor) %>%
sapply(nlevels) %>%
`>`(maxlevels) %>%
which() %>%
names()
return(invalid_factors)
}
.check.factor.levels(inference_pop)
.check.factor.levels <- function(data,
maxlevels = 4L) {
invalid_factors <- data %>%
dplyr::select_if(is.factor) %>%
sapply(nlevels) %>%
{. > maxlevels} %>%
which() %>%
names()
return(invalid_factors)
}
.check.factor.levels(inference_pop)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
library(generalizeR)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
weighting(target_data, "trial", covariates = selection_covariates)
x = weighting(target_data, "trial", covariates = selection_covariates)
x
?assess
?stratify
?recruit
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
x = weighting(target_data, "trial", covariates = selection_covariates)
x
kableExtra::footnote_marker_symbol(1))
kableExtra::footnote_marker_symbol(1)
kableExtra::footnote_marker_symbol(2)
?footnote
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
x = weighting(target_data, "trial", covariates = selection_covariates)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
x = weighting(target_data, "trial", covariates = selection_covariates)
x
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
x = weighting(target_data, "trial", covariates = selection_covariates)
x
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
x
x = weighting(target_data, "trial", covariates = selection_covariates)
x
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
print(strat_output)
summarize(strat_output)
summary(strat_output)
strat_output
?class
?setClass
## A simple class with two slots
track <- setClass("track", slots = c(x="numeric", y="numeric"))
source("~/.active-rstudio-document", echo=TRUE)
t1
track <- setClass("track")
## an object from the class
t1 <- track(1)
## A simple class with two slots
track <- setClass("track", slots = "numeric")
## an object from the class
t1 <- track(1)
## A simple class with two slots
track <- setClass("track", slots = c(x="numeric"))
## an object from the class
t1 <- track(1)
## an object from the class
t1 <- track(x=1)
t1
## A simple class with two slots
track <- setClass("track", slots = c("numeric"))
## an object from the class
t1 <- track(1)
## an object from the class
t1 <- track("a")
x
x
x
strat_output
?attributes
x <- cbind(a = 1:3, pi = pi) # simple matrix with dimnames
attributes(x)
x
attributes(x)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
print(strat_output)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
print(crayon::bold("blue"))
cat(crayon::bold("blue"))
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output$heat_data_kable
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
w
w = weighting(target_data, "trial", selection_covariates)
w = weighting(target_data, "trial", covariates = selection_covariates)
w
assess(target_data)
x <- assess(target_data)
x
?assess
?.get.gen.index
knitr::opts_chunk$set(echo = TRUE)
library(generalizeR)
library(rlang)
library(tidyverse)
# Store desired covariates in object
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%  # Rename treatment receipt indicator variable and change missing values to zeroes
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>%
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
?pbinom
?qbinom(0.05, 20)
qbinom(0.05, 20)
qbinom(0.05, 20, 0.5)
qbinom(0.95, 20, 0.5)
qbinom(0.95, 100, 0.5)
2^(-8)
2^(-7)
2^(-6)
2^-5
@6-4
2^-4
?qbinom(0.05, 100, 0.5)
qbinom(0.05, 100, 0.5)
qbinom(0.975, 100, 0.5)
pbinom(60, 100, 0.05)
pbinom(60, 100, 0.5)
pbinom(60, 100, 0.5, lower.tail = FALSE)
pbinom(59, 100, 0.5, lower.tail = FALSE)
strat_output
library(magrittr)
library(ggplot2)
library(rlang)
library(generalizeRdata)
library(generalizeR)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
print(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
strat_output
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
library(magrittr)
library(ggplot2)
library(rlang)
library(generalizeRdata)
library(generalizeR)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
print(strat_output)
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
summary(strat_output)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
strat_output
summary(strat_output)
summary(strat_output)
summary(strat_output)
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Store desired covariates in object
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%  # Rename treatment receipt indicator variable and change missing values to zeroes
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>%
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study",
treatment_indicator = "in_treat",
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is not wholly separate from population)
weighting_output1
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study",
treatment_indicator = "in_treat",
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is not wholly separate from population)
