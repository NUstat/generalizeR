}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
tokens <- unlist(tokens)
unique(calls)
tokens = parse("R/stratify.R") %>% as.list()
calls <- c()
while (TRUE) {
any_unpacked <- FALSE
for (ii in seq_along(tokens)) {
part <- tokens[[ii]]
# Calls always have the function name as the first element
if (is.call(part)) {
fun_token <- part[[1]]
calls <- c(calls, deparse(fun_token))
}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
tokens <- unlist(tokens)
if (!any_unpacked) break
}
part
for (ii in seq_along(tokens)) {
part <- tokens[[ii]]
# Calls always have the function name as the first element
if (is.call(part)) {
fun_token <- part[[1]]
calls <- c(calls, deparse(fun_token))
}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
tokens
filepath = "R/stratify.R"
code <- parse(filepath)
tokens <- as.list(code)
calls <- c()
tokens
while (TRUE) {
any_unpacked <- FALSE
for (ii in seq_along(tokens)) {
part <- tokens[[ii]]
# Calls always have the function name as the first element
if (is.call(part)) {
fun_token <- part[[1]]
calls <- c(calls, deparse(fun_token))
}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
tokens <- unlist(tokens)
if (!any_unpacked) break
}
any_unpacked
any_unpacked <- FALSE
for (ii in seq_along(tokens)) {
part <- tokens[[ii]]
# Calls always have the function name as the first element
if (is.call(part)) {
fun_token <- part[[1]]
calls <- c(calls, deparse(fun_token))
}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
part <- tokens[[ii]]
part
seq_along(tokens)
tokens[[1]]
tokens[[2]]
tokens[[3]]
tokens[[4]]
tokens[[5]]
is.call(part)
part = tokens[[1]]
is.call(part)
?is.call
get_calls <- function(filepath) {
code <- parse(filepath)
tokens <- as.list(code)
calls <- c()
while (TRUE) {
any_unpacked <- FALSE
for (ii in seq_along(tokens)) {
part <- tokens[[ii]]
# Calls always have the function name as the first element
if (is.call(part)) {
fun_token <- part[[1]]
calls <- c(calls, deparse(fun_token))
}
# Expressions have a length
if (length(part) > 1) {
tokens[[ii]] <- as.list(part)
any_unpacked <- TRUE
}
}
tokens <- unlist(tokens)
if (!any_unpacked) break
}
unique(calls)
}
get_calls("R/stratify.R")
file_parsed = parse("R/stratify.R")
functions = Filter(is_function, file_parsed)
is_function = function (expr) {
if (! is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr)
as.character(expr[[2]])
is_assign = function (expr)
is.call(expr) && as.character(expr[[1]]) %in% c('=', '<-', 'assign')
file_parsed = parse("R/stratify.R")
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
function_names
source("~/generalizeR/R/recruit.R", echo=TRUE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
recruit(strat_output)
rlang::last_error()
rlang::last_trace()
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
.make.recruitment.table(strat_output, 20)
test = .make.recruitment.table(strat_output, 20)
test$recruit_table
test
test[[2]]
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
test = recruit(strat_output)
test
test$recruitment_lists
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/utils.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
strat_output$pop_data_by_stratum
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
test = recruit(strat_output)
test
recruit(strat_output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
test$recruitment_kable
test
strat_output
strat_output
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(strat_output)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
recruit(strat_output, guided = FALSE, sample_size = 0, save_as_csv = TRUE)
recruit(strat_output, guided = FALSE, sample_size = a, save_as_csv = TRUE)
recruit(strat_output, guided = FALSE, sample_size = "a", save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = "a", save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, sample_size = "a", save_as_csv = TRUE)
?stopifnot
?assertthat
install.packages("assertthat")
?assertthat
install.packages("assertthat")
?assertthat
library(assertthat)
?assert_that
x<-NULL
x
not_empty(x)
a<-1
not_empty(a)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/stratify.R", echo=TRUE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/utils.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/libraries.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
?daisy
source("~/generalizeR/R/stratify.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
is_odd <- function(x) {
assert_that(is.numeric(x), length(x) == 1)
x%%2 == 1
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
is_odd <- function(x) {
assert_that(is.numeric(x), length(x) == 1)
x%%2 == 1
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
on_failure(is_odd) <- function(call, env) {
paste0(deparse(call$x), " is even")
}
see_if(is_odd(2))
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(strat_output, guided = FALSE, save_as_csv = TRUE)
is_empty <- function(x) {
assertthat::assert_that(not_empty(x))
}
on_failure(is_empty) <- function(call, env) {
"You must specify the number of units that you wish to recruit when running the unguided version of this function."
}
is_empty()
x<-NULL
x
noNA(x)
noNA(a)
noNA(b)
x<-NA
noNA(x)
?is_empty
is_empty(NULL)
is_empty(list())
is_empty(list(NULL))
?not_empty
not_empty(x)
x
not_empty(numeric())
not_empty(mtcars[0, ])
not_empty(mtcars[, 0])
on_failure(is_empty) <- function(call, env) {
"You must specify the number of units that you wish to recruit when running the unguided version of this function."
}
mtcars[, 0]
mtcars[0, 0]
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
x<-NULL
not_empty(x)
source("~/generalizeR/R/recruit.R", echo=TRUE)
not_empty(x)
rec_output <- recruit(strat_output, guided = FALSE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
rm(list = ls())
strat_output
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
rec_output <- recruit(strat_output, guided = FALSE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
?Kmeans_rcpp
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
install.packages("clusterR")
source("~/generalizeR/R/stratify.R", echo=TRUE)
strat_output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idvar = "ncessch")
source("~/generalizeR/R/recruit.R", echo=TRUE)
rec_output <- recruit(strat_output, guided = FALSE)
?on_failure
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
library(assertthat)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
detach("package:assertthat", unload=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
unloadNamespace("assertthat")
?dbplyr
