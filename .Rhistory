#library(generalizeR)
library(generalizeRdata)
library(tidyverse)
library(devtools)
load_all("./")
cc_df <- cc
inference_pop <- cc %>%
filter(st == "IL") %>%
filter(charter == 0) %>%
filter(g_10_offered == "No")
inference_pop <- read.csv("../CompositePlanetarySystems_v3.csv")
strat_output <- stratify(data = inference_pop,
guided = TRUE,
n_strata = 3,
variables = c("pct_white",
"pct_male"),
idvar = "ncessch")
#library(generalizeR)
library(generalizeRdata)
library(tidyverse)
library(devtools)
load_all("./")
planet_pop <- read.csv("../CompositePlanetarySystems_v3.csv")
planet_strat_output <- stratify(data = planet_pop,
guided = FALSE,
n_strata = 4,
variables = colnames(planet_pop)[c(2,3,4,5,8,9,10,11,12,13,14,
15,16,17,18,19,20,21,22,23,24,
25,26)],
idvar = "pl_name")
planet_recruit_output <- recruit(planet_strat_output,
guided = FALSE,
sample_size = 70
)
planet_pop %>% nunique()
planet_pop %>% n_distinct
planet_pop %>% rowwise %>% n_distinct
planet_pop %>% summarise_all(n_unique)
planet_pop %>% summarise_all(n_distinct)
planet_strat_output$dataset %>% summarise_all(n_distinct())
planet_strat_output$dataset %>% summarise_all(n_distinct)
planet_strat_output$dataset %>% summarise_all(n_distinct)
planet_pop %>% drop_na %>% summarise_all(n_distinct)
#library(generalizeR)
library(generalizeRdata)
library(tidyverse)
library(devtools)
load_all("./")
planet_pop <- read.csv("../CompositePlanetarySystems_v3.csv")
planet_strat_output <- stratify(data = planet_pop,
guided = FALSE,
n_strata = 4,
variables = colnames(planet_pop)[c(2,3,4,5,8,10,11,12,13,
15,16,17,18,19,20,21,22,23,24,
25,26)],
idvar = "pl_name")
planet_recruit_output <- recruit(planet_strat_output,
guided = FALSE,
sample_size = 70
)
duplicated(t(planet_pop))
duplicated(t(planet_pop %>% drop_na))
planet_recruit_output <- recruit(planet_strat_output,
guided = FALSE,
sample_size = 70
)
=======
library(rlang)
library(ggplot2)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
weighting(target_data, "trial", selection_covariates)
weighting(target_data, "trial", covariates = selection_covariates)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
library(generalizeRdata)
library(magrittr)
library(rlang)
library(ggplot2)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
source("~/STEPP Center/generalizeR/R/recruit.R", echo=TRUE)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% sample_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
stratify(inference_pop,
n_strata = 4,
variables = selection_covariates,
idvar = "ncessch",
verbose = FALSE)
stratify(inference_pop,
n_strata = 4,
variables = selection_covariates,
idvar = "ncessch",
verbose = FALSE,
guided = FALSE)
source("~/STEPP Center/generalizeR/R/stratify.R", echo=TRUE)
stratify(inference_pop,
n_strata = 4,
variables = selection_covariates,
idvar = "ncessch",
verbose = FALSE,
guided = FALSE)
