filepath <- easycsv::choose_dir()
for(i in 1:(n_strata)) {
filename <- paste(filepath, "recruitment_list_for_", i, ".csv", sep = "")
write_csv(x$recruitment_lists[[i]], path = filename)
}
cat("\nLists saved successfully. You can also access these \nlists later from '", paste(deparse(substitute(x))), "' by using '$recruitment_lists'.", sep = "")
}
else {
cat("You can access these lists later from '", paste(deparse(substitute(x))), "' by using '$recruitment_lists'.", sep = "")
}
}
else {
# Non-guided stuff goes here.
if(is.null(number)) {
stop("You must specify the number of units that you want to recruit.")
}
if(!inherits(x, "generalizer_output")) {
stop("Argument 'x' must be an object of class \"generalizer_output\", \ncreated by running stratify().")
}
cat("The generalizer output you've supplied consists of ", paste(pop_size), " \npopulation units divided into ", paste(n_strata), " strata along these \nvariables: ", paste(x$variables, collapse = ", "), ".\n\n", sep = "")
recruit_table <- x$heat_data %>% select(Stratum, n) %>%
distinct(Stratum, .keep_all = TRUE) %>%
mutate(Population_Units = n,
Proportion = round(n/(dim(recruit_data)[1]), digits = 3),
Number_To_Recruit = round_preserve_sum(number * Proportion)) %>%
filter(Stratum != "Population") %>%
select(Stratum, Population_Units, Proportion, Number_To_Recruit) %>%
pivot_longer(names_to = " ", cols = c(Population_Units, Proportion, Number_To_Recruit)) %>%
pivot_wider(names_from = Stratum, names_prefix = "Stratum ") %>%
mutate(" " = c("Population Units", "Proportion", "Number To Recruit")) %>%
as.data.frame()
recruit_header <- c(1, n_strata)
names(recruit_header) <- c(" ", "Stratum")
recruit_kable <- recruit_table %>% kbl(caption = "Recruitment Table",
align = "c",
col.names = c(" ", 1:n_strata)) %>%
column_spec(1, bold = TRUE, border_right = TRUE) %>%
row_spec(3, background = "#5CC863FF") %>%
kable_styling(c("striped", "hover"), fixed_thead = TRUE) %>%
add_header_above(recruit_header)
print(recruit_table, row.names = FALSE)
print(recruit_kable)
cat("\n", paste(n_strata), " recruitment lists have been generated, one per stratum. \nEach contains the ID information for the units, ranked in \norder of desirability. \n\nAttempt to recruit the desired proportionate number of units \nper stratum. If unsuccessful, recruit the next unit in the list, \nand continue until you have recruited the desired number of \nunits per stratum.", sep = "")
if(save_as_csv == TRUE) {
cat("\n\nYou've chosen to save these lists as .csv files. \nThe lists will be saved as 'recruitment_list_for_#', one for \neach stratum. They have been saved to your current working directory.")
for(i in 1:(n_strata)) {
filename <- paste("recruitment_list_for_", i, ".csv", sep = "")
write_csv(x$recruitment_lists[[i]], path = filename)
}
}
else {
cat("You can access these lists later from", paste(deparse(substitute(x))), " by using '$recruitment_lists'.", sep = "")
}
}
output <- list(recruit_table)
return(invisible(output))
}
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output)
summary(output)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/libraries.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output)
asess(output)
assess(output)
source("~/generalizeR/R/assess.R", echo=TRUE)
source("~/generalizeR/R/weighting.R", echo=TRUE)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("beatricechao99/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit_output <- recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit_output <- recruit(output, guided = FALSE, number = 40)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
output
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
output$heat_data
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
install_github("NUstat/generalizeR")
install.packages("devtools")
# install.packages('devtools')
library(devtools)
remove.packages("devtools")
install.packages("devtools")
# install.packages('devtools')
library(devtools)
install("Rtools")
install.packages("Rtools")
# install.packages('devtools')
library(devtools)
install.packages("devtools")
# install.packages('devtools')
library(devtools)
library(crayon)
library(tidyverse)
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
# install.packages('devtools')
library(devtools)
remove.packages("generalizeR")
install_github("NUstat/generalizeR")
source("~/generalizeR/R/recruit.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/libraries.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/libraries.R", echo=TRUE)
library(crayon)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/stratify.R", echo=TRUE)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
library(tidyverse)
library(cluster)
library(ClusterR)
library(kableExtra)
library(generalizeRdata)
library(viridisLite)
library(viridis)
library(janitor)
library(ggrepel)
library(ggnewscale)
library(lazyeval)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop
output <- stratify(data = inference_pop)
library(crayon)
remove.packages("crayon")
install.packages("crayon")
install.packages("crayon")
library(crayon)
# Note:
#  changing back to this (below)
#   rmarkdown::html_vignette
# would probably make the vignette smaller.
knitr::opts_chunk$set(echo = TRUE)
library(crayon)
# install.packages('devtools')
library(devtools)
library(tidyverse)
# install_github("katiecoburn/generalizeRdata")
# install_github("NUstat/generalizeR")
library(generalizeRdata)
library(generalizeR)
library(ggthemes)
# install_github("eliocamp/ggnewscale")
library(ggnewscale)
library(gridExtra)
library(ggrepel)
# install.packages("usmap")
library(usmap)
# install.packages("kableExtra")
library(kableExtra)
# install.packages("viridis")
library(viridis)
# install.packages("patchwork")
library(patchwork)
library(lazyeval)
output <- stratify(data = inference_pop)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
library(janitor)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
library(crayon)
library(tidyverse)
library(janitor)
library(cluster)
library(ClusterR)
library(kableExtra)
library(generalizeRdata)
library(viridisLite)
library(viridis)
library(janitor)
library(ggrepel)
library(ggnewscale)
library(lazyeval)
output <- stratify(inference_pop, guided = FALSE, n_strata = 4, variables = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch"), idnum = "ncessch")
output$heat_data_kable
recruit_output = recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_kable
recruit_output <- recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_kable
recruit_output$recruit_kable
recruit(output, guided = FALSE, number = 40)
recruit(output, guided = FALSE, number = 40)
recruit_output <- recruit(output, guided = FALSE, number = 40)
recruit_output$recruit_table
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/libraries.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = ncessch)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, number = 40)
library(devtools)
install_github("NUstat/generalizeR")
recruit(output, guided = FALSE, number = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, number = 40)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output, guided = FALSE, n = 40)
recruit(output, guided = FALSE, n = 40)
n
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/stratify.R", echo=TRUE)
source("~/generalizeR/R/stratify_basic.R", echo=TRUE)
source("~/generalizeR/R/helper_functions.R", echo=TRUE)
source("~/generalizeR/R/recruit.R", echo=TRUE)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, n = 40)
inference_pop <- cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
selection_vars = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
output <- stratify(data = inference_pop, guided = FALSE, n_strata = 4,
variables = selection_vars, idnum = "ncessch")
recruit(output, guided = FALSE, sample_size = 40)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40.5)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40.5)
else {
if(is.null(sample_size)) {
stop("You must specify the number of units that you wish to recruit.")
}
if(!(sample_size %in% valid_inputs)) {
errorMsg = paste("The number of units you wish to recruit must be an integer between 1 and \nthe total number of units in your population (",
pop_size,
").",
sep = "")
stop(errorMsg)
}
if(!inherits(x, "generalizer_output")) {
stop("Argument 'x' must be an object of class \"generalizer_output\", \ncreated by running stratify().")
}
}
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output, guided = FALSE, sample_size = 40.5)
recruit(output, guided = FALSE, sample_size = 0)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
source("~/generalizeR/R/recruit.R", echo=TRUE)
recruit(output)
recruit(output, guided = FALSE, sample_size = 40)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output, guided = FALSE, sample_size = 40, save_as_csv = TRUE)
recruit(output)
# Define inference population
inference_pop = cc %>%
filter(st == "TX") %>%
filter(charter == 1) %>%
filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idnum = "ncessch")
recruit_output = recruit(output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = recruit_output$recruit_data
target_data = recruit_output$recruit_data
# Store stratum sizes
stratum_sizes = target_data %>%
group_by(Stratum) %>%
count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = c(20, 4, 5, 11) # c(20, 4, 5, 11) is optimal.
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the trial, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
trial_data = target_data %>%
group_by(Stratum) %>%
nest() %>%
ungroup() %>%
mutate(n = stratum_sample_sizes) %>%
mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = trial_data %>%
group_by(Stratum) %>%
nest() %>%
ungroup() %>%
mutate(samp = purrr::map(.x = data,
.f = function(.x) slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
mutate(trial = ifelse(ncessch %in% trial_data$ncessch, 1, 0),
treatment = case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -rank, -ncessch)
