covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
print(assess_output)
assess_output
assess_output$covariate_kable # Unweighted covariate table
assess_output$covariate_kable %>% print() # Unweighted covariate table
assess_output$covariate_kable %>% print() # Unweighted covariate table
assess_output$covariate_kable
print(assess_output)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
print(assess_output)
rm(list = "assess")
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
print(assess_output)
rm(list = ls())
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
print(assess_output)
S3method(print, generalizeR_assess)
.S3method("print", "generalizeR_assess")
document()
?document
devtools::document()
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
print(assess_output)
assess_output
summary(assess_output)
summary(assess_output) %>% print()
assess_output
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
summary(assess_output)
summary(assess_output$participation_probs$in_sample)
summary(asess_output)
summary(assess_output)
expanded.data <- target_pop
covariate <- "CPSTTENA"
sample_indicator <- "in_study"
new_plot <- expanded.data %>%
ggplot() +
geom_density(aes(x = !!rlang::sym(covariate), fill = factor(!!rlang::sym(sample_indicator))),
alpha = 0.7) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_discrete(name = NULL,
labels = c("Sample", "Population")) +
ggtitle(paste(covariate, "Density Plot")) +
theme_minimal() +
theme(axis.ticks.x = element_line(),
axis.text.y = element_blank(),
axis.line = element_line(),
axis.title = element_blank(),
plot.title = element_text(size = 12))
new_plot
new_plot <- expanded.data %>%
ggplot() +
geom_density(aes(x = !!rlang::sym(covariate), fill = factor(!!rlang::sym(sample_indicator))),
alpha = 0.7) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
# scale_fill_discrete(name = NULL,
#                     labels = c("Sample", "Population")) +
ggtitle(paste(covariate, "Density Plot")) +
theme_minimal() +
theme(axis.ticks.x = element_line(),
axis.text.y = element_blank(),
axis.line = element_line(),
axis.title = element_blank(),
plot.title = element_text(size = 12))
new_plot
expanded.data <- target_pop
covariate <- "CPSTTENA"
sample_indicator <- "in_study"
new_plot <- expanded.data %>%
ggplot() +
geom_density(aes(x = !!rlang::sym(covariate), fill = factor(!!rlang::sym(sample_indicator))),
alpha = 0.7) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_discrete(name = NULL,
labels = c("Population", "Sample")) +
ggtitle(paste(covariate, "Density Plot")) +
theme_minimal() +
theme(axis.ticks.x = element_line(),
axis.text.y = element_blank(),
axis.line = element_line(),
axis.title = element_blank(),
plot.title = element_text(size = 12))
new_plot
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
summary(assess_output)
a = data.frame(x = c(1,2))
a
crayon::cyan$bold(a)
crayon::cyan$bold(a$x)
sapply(a$x, crayon::cyan$bold())
sapply(a$x, crayon::cyan$bold
)
crayon::cyan$bold(1)
crayon::cyan$bold(1) %>% print()
crayon::cyan$bold("1"
)
crayon::bold(1)
?crayon
a = tibble(x = c(1,2))
crayon::cyan$bold(a)
lapply(a, crayon::cyan$bold)
lapply(a, crayon::cyan$bold) %>% print()
install.packages("colorDF")
colorDF_themes_show()
library(colorDF)
colorDF_themes_show()
colorDF_themes()
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
a
colorDF(a, theme = "universal")
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
prob_dist_table <- prob_dist_table %>%
colorDF::colorDF(theme = "universal")
prob_dist_table
prob_dist_table
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
prob_dist_table
prob_dist_table %>%
colorDF::colorDF(theme = "universal")
prob_dist_table %>%
tibble() %>%
colorDF::colorDF(theme = "universal")
prob_dist_table %>%
tibble()
prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "universal")
colorDF_themes()
prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "light")
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "light")
prob_dist_table
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "black")
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
prob_dist_table %>%
data.frame()
x = assess_output
in_sample_probs <- data.frame(probs = x$participation_probs$in_sample) %>%
mutate(sample_indicator = 1)
not_in_sample_probs <- data.frame(probs = x$participation_probs$not_in_sample) %>%
mutate(sample_indicator = 0)
probs <- rbind(in_sample_probs, not_in_sample_probs)
probs
probs %>%
ggplot2::ggplot() +
geom_density(aes(x = probs, fill = sample_indicator),
alpha = 0.7) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_discrete(name = NULL,
labels = c("Not in Sample", "In Sample")) +
labs(x = "Probability",
y = "Density",
title = "Distribution of Estimated Sample Membership Probabilities") +
theme_minimal() +
theme(axis.ticks.x = element_line(),
axis.text.y = element_blank(),
axis.line = element_line(),
axis.title = element_blank(),
plot.title = element_text(size = 12))
}
probs
probs %>%
data.frame() %>%
ggplot2::ggplot() +
geom_density(aes(x = probs, fill = sample_indicator),
alpha = 0.7) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_discrete(name = NULL,
labels = c("Not in Sample", "In Sample")) +
labs(x = "Probability",
y = "Density",
title = "Distribution of Estimated Sample Membership Probabilities") +
theme_minimal() +
theme(axis.ticks.x = element_line(),
axis.text.y = element_blank(),
axis.line = element_line(),
axis.title = element_blank(),
plot.title = element_text(size = 12))
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
names(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
col.names(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
?colorDF
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "universal")
prob_dist_table
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
row.names(prob_dist_table) <- paste0(c("Sample","Population"), " (n = ", c(x$n_sample, x$n_pop),")")
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "universal")
prob_dist_table
colorDF_themes_show()
x = assess_output
prob_dist_table <- rbind(summary(x$participation_probs$in_sample),
summary(x$participation_probs$not_in_sample))
row.names(prob_dist_table) <- paste0(c("Sample","Population"), " (n = ", c(x$n_sample, x$n_pop),")")
colnames(prob_dist_table) <- c("Min", "Q1", "Median", "Mean", "Q3", "Max")
prob_dist_table <- prob_dist_table %>%
data.frame() %>%
colorDF::colorDF(theme = "dark")
prob_dist_table
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
?labs
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
library(gargle)
detach("package:gargle", unload = TRUE)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
assess_output
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
knitr::opts_chunk$set(echo = TRUE)
options(kableExtra.auto_format = FALSE)
assess_output
assess_output$cov_dist_facet_plot
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
summary(assess_output)
assess_output$covariate_kable
rm(list = ls())
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
devtools::install_github("NUstat/generalizeR")
devtools::install_github("NUstat/generalizeR")
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
library(generalizeR)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
assess_output$covariate_table
devtools::document()
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
devtools::document()
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
