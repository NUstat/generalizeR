names(means.tab) = c("sample", "population")
n_sample = as.numeric(table(means.tab[,"sample"]))[2]
n_sample
table(means.tab[,"sample"])
means.tab
table(means.tab[,"sample"])
means.tab
means.tab
expanded.data
head(expanded.data)
means.tab
expanded.data <- data.frame(sample_var = target_data[, sample_var],
model.matrix(~-1 + ., data = target_data[, selection_covariates]))
means.tab <- expanded.data %>%
dplyr::group_by(!! sym(sample_var)) %>%
dplyr::summarise_at(names(expanded.data)[-1], mean) %>%
t() %>%
as.data.frame()
means.tab
table(expanded.data[,"sample"])
table(expanded.data[,sample_var])
n_sample = as.numeric(table(expanded.data[,sample_var]))[2]
n_sample
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
n_sample = as.numeric(table(expanded.data[,sample_var]))[2]
n_sample
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
sample_var
expanded.data <- data.frame(target_data[, sample_var],
model.matrix(~-1 + ., data = target_data[, selection_covariates]))
expanded.data
expanded.data <- data.frame(target_data[, sample_var],
model.matrix(~-1 + ., data = target_data[, selection_covariates])) %>% head()
expanded.data
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
expanded.data
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
rlang::last_error()
expanded.data
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
expanded.data
expanded.data[,-sample_var]
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
means.tab
expanded.data <- data.frame(target_data[, sample_var],
model.matrix(~-1 + ., data = target_data[, selection_covariates]))
means.tab <- expanded.data %>%
dplyr::group_by(!! sym(sample_var)) %>%
dplyr::summarise_at(names(expanded.data)[-1], mean) %>%
t() %>%
as.data.frame()
means.tab <- means.tab[-1,]
means.tab
names(means.tab) = c("sample", "population")
means.tab
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
means.tab
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
.generate.ps(target_data, "trial", selection_covariates, "lr")
.trim.pop(target_data, "trial", selection_covariates)
.get.covariate.bounds("total", "trial", target_data)
.get.covariate.bounds("pct_female", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("pct_female", "trial", target_data)
target_data
target_data %>% print(n = Inf)
target_data %>%     dplyr::filter(sample_var == 1) %>%
dplyr::pull(covariate)
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(total)
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(covariate)
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(!!sym(covariate))
covariate = "total"
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(!!sym(covariate))
covariate = "total"
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(covariate)
target_data %>%
dplyr::filter(trial == 1) %>%
dplyr::pull(sym(covariate))
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
.get.covariate.bounds("total", "trial", target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
assess(target_data)
.generate.ps(target_data, "trial", selection_covariates, "lasso")
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lr", is_data_disjoint = TRUE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "rf", is_data_disjoint = TRUE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lasso", is_data_disjoint = TRUE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lr", is_data_disjoint = FALSE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "rf", is_data_disjoint = FALSE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lasso", is_data_disjoint = FALSE, trim_pop = TRUE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lr", is_data_disjoint = TRUE, trim_pop = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "rf", is_data_disjoint = TRUE, trim_pop = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lasso", is_data_disjoint = TRUE, trim_pop = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lr", is_data_disjoint = FALSE, trim_pop = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "rf", is_data_disjoint = FALSE, trim_pop = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lasso", is_data_disjoint = FALSE, trim_pop = FALSE)
assess(target_data)
assess(target_data, guided = FALSE, covariates = selection_covariates, sample_var = "trial",
estimation_method = "lr", is_data_disjoint = TRUE, trim_pop = TRUE)
outcome = NULL
paste("The outcome variable", blue$bold(outcome), "is not a variable in the data provided.")
paste("The outcome variable", crayon::blue$bold(outcome), "is not a variable in the data provided.")
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting(target_data, "trial", "treatment", outcome = "a")
weighting("trial", "treatment", outcome = "a")
assess(target_data, guided = FALSE)
assess(target_data, guided = FALSE, covariates = selection_covariates)
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/assess.R", echo=TRUE)
?drop_na
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Standardize selection covariates so that the means and standard deviations of the treatment units are 0 and 1, respectively.
target_data = target_data %>%
dplyr::mutate(total = (total - mean(total[trial == 1])) / sd(total[trial == 1]),
pct_black_or_african_american = (pct_black_or_african_american - mean(pct_black_or_african_american[trial == 1])) / sd(pct_black_or_african_american[trial == 1]),
pct_female = (pct_female - mean(pct_female[trial == 1])) / sd(pct_female[trial == 1]),
pct_free_and_reduced_lunch = (pct_free_and_reduced_lunch - mean(pct_free_and_reduced_lunch[trial == 1])) / sd(pct_free_and_reduced_lunch[trial == 1]))
sigma = 10^4
beta = 0
# Average treatment effects for each variable
delta = c(0.5, 1, 1, 1, 1) * sigma
# Random noise
set.seed(7835)
epsilon = rnorm(nrow(target_data), 0, sigma)
# Create outcome variable
target_data = target_data %>%
mutate(outcome = delta[1]*treatment + (beta + delta[2]*treatment)*total +
(beta + delta[3]*treatment)*pct_black_or_african_american +
(beta + delta[4]*treatment)*pct_female +
(beta + delta[5]*treatment)*pct_free_and_reduced_lunch +
epsilon)
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Standardize selection covariates so that the means and standard deviations of the treatment units are 0 and 1, respectively.
target_data = target_data %>%
dplyr::mutate(total = (total - mean(total[trial == 1])) / sd(total[trial == 1]),
pct_black_or_african_american = (pct_black_or_african_american - mean(pct_black_or_african_american[trial == 1])) / sd(pct_black_or_african_american[trial == 1]),
pct_female = (pct_female - mean(pct_female[trial == 1])) / sd(pct_female[trial == 1]),
pct_free_and_reduced_lunch = (pct_free_and_reduced_lunch - mean(pct_free_and_reduced_lunch[trial == 1])) / sd(pct_free_and_reduced_lunch[trial == 1]))
sigma = 10^4
beta = 0
# Average treatment effects for each variable
delta = c(0.5, 1, 1, 1, 1) * sigma
# Random noise
set.seed(7835)
epsilon = rnorm(nrow(target_data), 0, sigma)
# Create outcome variable
target_data = target_data %>%
dplyr::mutate(outcome = delta[1]*treatment + (beta + delta[2]*treatment)*total +
(beta + delta[3]*treatment)*pct_black_or_african_american +
(beta + delta[4]*treatment)*pct_female +
(beta + delta[5]*treatment)*pct_free_and_reduced_lunch +
epsilon)
target_data
target_data$total %>% mean()
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Standardize selection covariates so that the means and standard deviations of the treatment units are 0 and 1, respectively.
target_data = target_data %>%
dplyr::mutate(total = (total - mean(total[trial == 1])) / sd(total[trial == 1]))
target_data$total %>% mean()
# Define inference population
inference_pop = cc %>%
dplyr::filter(st == "TX") %>%
dplyr::filter(charter == 1) %>%
dplyr::filter(g_10_offered == "Yes")
# Define selection covariates
selection_covariates = c("total", "pct_black_or_african_american", "pct_female", "pct_free_and_reduced_lunch")
# Set a seed
set.seed(8675)
# Create stratify object
stratify_output = stratify(inference_pop, guided = FALSE, n_strata = 4, variables = selection_covariates, idvar = "ncessch")
recruit_output = recruit(stratify_output, guided = FALSE, sample_size = 40, save_as_csv = FALSE)
# Define target population as raw recruitment data from stratify output
target_data = stratify_output$pop_data_by_stratum
# Store stratum sizes
stratum_sizes = target_data %>%
dplyr::group_by(Stratum) %>%
dplyr::count(Stratum)
# Define sample sizes to be selected from each stratum.
stratum_sample_sizes = recruit_output$recruitment_numbers
# Total sample size is the sum of the stratum sample sizes
total_sample_size = stratum_sample_sizes %>% sum()
# Randomly select units within each stratum to be part of the sample, according to the specified stratum sample sizes.
# Add selected units to a new dataframe.
sample_data = target_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(n = stratum_sample_sizes) %>%
dplyr::mutate(samp = purrr::map2(.x = data, .y = n,
.f = function(.x, .y) dplyr::slice_sample(.data = .x, n = .y))) %>%
dplyr::select(-data, -n) %>%
tidyr::unnest(samp)
# Randomly assign selected units within each stratum to treatment and add them to a new dataframe. Units that have not
# been assigned to treatment but have still been selected for trial will be assumed to be part of control.
treatment_data = sample_data %>%
dplyr::group_by(Stratum) %>%
tidyr::nest() %>%
dplyr::ungroup() %>%
dplyr::mutate(samp = purrr::map(.x = data,
.f = function(.x) dplyr::slice_sample(.data = .x, prop = 0.5))) %>%
dplyr::select(-data) %>%
tidyr::unnest(samp)
# Add columns to target data specifying whether each unit is part of the trial or not, and if they are, whether they have been assigned
# to treatment or control
target_data = target_data %>%
dplyr::mutate(trial = ifelse(ncessch %in% sample_data$ncessch, 1, 0),
treatment = dplyr::case_when(
ncessch %in% treatment_data$ncessch ~ 1,
ncessch %in% trial_data$ncessch ~ 0)
) %>%
dplyr::select(-Stratum, -ncessch)
# Standardize selection covariates so that the means and standard deviations of the treatment units are 0 and 1, respectively.
target_data = target_data %>%
dplyr::mutate(total = (total - mean(total[trial == 1])) / sd(total[trial == 1]),
pct_black_or_african_american = (pct_black_or_african_american - mean(pct_black_or_african_american[trial == 1])) / sd(pct_black_or_african_american[trial == 1]),
pct_female = (pct_female - mean(pct_female[trial == 1])) / sd(pct_female[trial == 1]),
pct_free_and_reduced_lunch = (pct_free_and_reduced_lunch - mean(pct_free_and_reduced_lunch[trial == 1])) / sd(pct_free_and_reduced_lunch[trial == 1]))
sigma = 10^4
beta = 0
# Average treatment effects for each variable
delta = c(0.5, 1, 1, 1, 1) * sigma
# Random noise
set.seed(7835)
epsilon = rnorm(nrow(target_data), 0, sigma)
# Create outcome variable
target_data = target_data %>%
dplyr::mutate(outcome = delta[1]*treatment + (beta + delta[2]*treatment)*total +
(beta + delta[3]*treatment)*pct_black_or_african_american +
(beta + delta[4]*treatment)*pct_female +
(beta + delta[5]*treatment)*pct_free_and_reduced_lunch +
epsilon)
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% mean()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total)
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% mean(na.rm = TRUE)
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% tidyr::drop_na %>% mean()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% tidyr::drop_na() %>% mean()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% tidyr::drop_na()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::select(total) %>% anyNA()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::pull(total) %>% mean()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::pull(pct_female) %>% mean()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::pull(pct_female) %>% sd()
target_data %>% dplyr::filter(trial == 1) %>% dplyr::pull(total) %>% sd()
target_data
target_data %>% print(n=Inf)
weighting(target_data, "trial", "treatment", outcome = "outcome", covariates = "selection_covariates")
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting(target_data, "trial", treatment_indicator = "treatment", outcome = "outcome", covariates = "selection_covariates")
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting(target_data, "trial", treatment_indicator = "treatment", outcome = "outcome", covariates = "selection_covariates")
weighting(target_data, "trial", treatment_indicator = "treatment", outcome = "outcome", covariates = selection_covariates)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting(target_data, "trial", treatment_indicator = "treatment", outcome = "outcome", covariates = selection_covariates)
