disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
library(generalizeR)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
assess_output$covariate_table
devtools::document()
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
devtools::document()
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
knitr::opts_chunk$set(echo = TRUE)
options(kableExtra.auto_format = FALSE)
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
summary(assess_output)
summary(assess_output)
summary(assess_output)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
tolower(NULL)
names(1)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = FALSE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = FALSE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output1)
paste0(c(1,2))
paste0("(, ", c(1,2))
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output1)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output1)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output1 <- weighting(data = target_pop,
summary(weighting_output1)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output1 <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
sumary(weighting_output1)
summary(weighting_output1)
rm(list = ls())
detach("package:generalizeR", unload = TRUE)
devtools::install_github("NUstat/generalizeR")
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
knitr::opts_chunk$set(echo = TRUE)
options(kableExtra.auto_format = FALSE)
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
summary(assess_output)
assess_output$covariate_kable # Unweighted covariate table
assess_output$cov_dist_facet_plot # Facet plot of covariate distributions
assess_output$cov_dist_plots[1:3] # Density plots of first three covariates specified
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE)
weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE)
detach("package:generalizeR", unload = TRUE)
rm(list = ls())
devtools::install_github("NUstat/generalizeR")
knitr::opts_chunk$set(echo = TRUE)
options(kableExtra.auto_format = FALSE)
library(generalizeR)
library(rlang)
library(tidyverse)
covariates <- c("CPSTTENA", "CPSTEXPA", "CPSTKIDR", "CPSTBLFP", "CPSTHIFP", "CPSTTOFC", "CPST00FP", "CPST01FP", "CPST20FP", "CPETDISP", "CPERRA7R", "CPEMALLP", "CPETG07P", "CPETG07C", "CPETBLAP", "CPETHISP", "CPETLEPP", "CPETECOP", "CPETRSKP", "CA007TR07R", "CA007TM07R", "CA311TM07R", "CA311TA07R", "CA311CM07R", "CA311CA07R", "RURAL")
# Read in outcome dataset that is only available to schools in the experiment
outcome <- read.csv("Simcalc_outs.csv")
# Population dataset has both schools in the experiment and schools not in the experiment (taken from CCD)
target_pop <- read.csv("data_simcalc_D.csv") %>% # Read in population data
filter(PILOT != 1) %>% # Delete observations that were in pilot study so TATE is not biased
mutate(
in_study = EXPT, # Rename sample inclusion indicator variable
# Rename treatment receipt indicator variable and change values not in study to NA
in_treat = ifelse(in_study == 1,
ifelse(TRT == 1, 1, 0),
NA)) %>%
left_join(outcome, # Add outcome variables to population dataset
by = "CAMPUS") %>%
filter(!duplicated(CAMPUS)) %>% # Remove any repeated observations
select(in_study, in_treat, m.m1gain, m.m2gain, all_of(covariates)) # Keep only sample indicator, treatment indicator, outcomes, and desired covariates
assess_output <- assess(data = target_pop,
guided = FALSE,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE, # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
trim_pop = FALSE) # Setting to TRUE means the population covariates will be trimmed (some observations will be removed) so as not to exceed the bounds of the sample covariates
assess_output
summary(assess_output)
assess_output$covariate_kable # Unweighted covariate table
assess_output$cov_dist_facet_plot # Facet plot of covariate distributions
assess_output$cov_dist_plots[1:3] # Density plots of first three covariates specified
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
source("~/STEPP Center/generalizeR/R/utils.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output)
weighting_output$TATE$model
weighting_output$TATE$model %>% summary()
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
sumary(weighting_output)
summary(weighting_output)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output)
weighting_output$TATE_table
weighting_output$TATE
weighting_output$``
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output$TATE_unadj
weighting_output$TATE
weighting_output$data_name
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
?tibble
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output$TATE_table
weighting_output$outcome
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting_output$outcome
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
weighting$treatment
weighting_output$treatment
summary(weighting_output)
source("~/STEPP Center/generalizeR/R/weighting.R", echo=TRUE)
weighting_output <- weighting(data = target_pop,
sample_indicator = "in_study", # Variable that indicates whether an observation is included in the sample (1 = in sample, 0 = out of sample)
treatment_indicator = "in_treat", # Variable that indicates whether an observation in the sample receives the treatment (1 = treatment group, 0 = control group). Observations not in the sample must have a value of NA for this variable.
outcome = "m.m1gain",
covariates = covariates,
estimation_method = "lr", # Estimation method is for propensity scores. Method is currently set to logistic regression. Can also be random forest ("rf") or LASSO ("lasso")
disjoint_data = TRUE) # Setting to FALSE means sample is treated as a subset of population. TRUE means sample and population are considered completely disjoint (no overlap)
summary(weighting_output)
weighting_output
