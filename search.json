[{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://nustat.github.io/generalizeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Kathleen M. Coburn  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. generalizeR Copyright (C) 2020 Kathleen M. Coburn This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"generalizeR Tutorial","text":"Welcome generalizeR! package designed guide education researchers : Using important features inference population stratify units Developing recruitment plan future evaluation Assessing generalizability completed evaluation Note possible use package either end sampling process: can start beginning use package obtain stratified sample, can start end previously obtained sample data assess generalizability.","code":""},{"path":[]},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"guided","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Guided","title":"generalizeR Tutorial","text":"stratify() function defaults ‘guided’ mode, meaning prints text throughout prompts user enter information question--answer format. intentional, part mimic nature http://thegeneralizer.org/ part intend R package accessible possible people limited R experience. Users running stratify() multiple times, familiar R, simply dislike guided feature can turn using argument ‘guided = FALSE’. , however, must sure specify values function arguments, otherwise obtained user input later. tutorial follow hypothetical example.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"filtering-the-inference-population","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Filtering the Inference Population","title":"generalizeR Tutorial","text":"Suppose team education researchers want test effect intervention SAT scores. somewhat limited resources, plan using sample size 40 schools. want estimate average effect intervention Texas charter high schools. Thus, inference population consists Texas charter high schools. Previous literature suggests gender, minority status, social class might affect gaps achievement, select stratifying variables – percentage female, percentage black, percentage free reduced lunch. also think school size might result treatment differences, include total school size well. Since working high schools, can use Common Core database provided ‘generalizeRdata’. information columns source data, run ?cc. looking st column, can already see problem . data frame contains schools states US, interested much narrower inference population. Therefore, filtering must first. identify Texas schools, can select rows st equal TX: filter non-charter schools, can use variable data frame called charter takes value 0 non-charter schools 1 charter schools. Finally, select high schools (almost always include grades 9 12), can use one grade indicator variables, say g_10_offered. combining filters, get: size inference population dropped 98,000 schools 350 schools. now includes Texas charter high schools (schools offer 10th grade).","code":"cc ## # A tibble: 98,563 × 43 ##        ncessch sch_name     st    mstreet1 mcity phone website lea_name sch_type ##          <dbl> <chr>        <chr> <chr>    <chr> <chr> <chr>   <chr>       <int> ##  1 10000500870 Ala Avenue … AL    600 E A… Albe… (256… http:/… Albertv…        1 ##  2 10000500871 Albertville… AL    402 E M… Albe… (256… http:/… Albertv…        1 ##  3 10000500879 Evans Elem … AL    901 W M… Albe… (256… http:/… Albertv…        1 ##  4 10000500889 Albertville… AL    1100 Ho… Albe… (256… http:/… Albertv…        1 ##  5 10000501616 Big Spring … AL    257 Cou… Albe… (256… http:/… Albertv…        1 ##  6 10000502150 Albertville… AL    1100 Ho… Albe… (256… http:/… Albertv…        1 ##  7 10000600193 Kate Duncan… AL    6077 Ma… Grant (256… http:/… Marshal…        1 ##  8 10000600872 Asbury Sch   AL    1990 As… Albe… (256… http:/… Marshal…        1 ##  9 10000600876 Claysville … AL    140 Cla… Gunt… (256… http:/… Marshal…        1 ## 10 10000600877 Douglas Ele… AL    P O Box… Doug… (256… http:/… Marshal…        1 ## # ℹ 98,553 more rows ## # ℹ 34 more variables: g_pk_offered <chr>, g_kg_offered <chr>, ## #   g_1_offered <chr>, g_2_offered <chr>, g_3_offered <chr>, g_4_offered <chr>, ## #   g_5_offered <chr>, g_6_offered <chr>, g_7_offered <chr>, g_8_offered <chr>, ## #   g_9_offered <chr>, g_10_offered <chr>, g_11_offered <chr>, ## #   g_12_offered <chr>, level <chr>, leaid <int>, charter <dbl>, ## #   titlei_status_text <chr>, magnet_text <chr>, nslp_status <chr>, … inference_pop <- cc %>%    filter(st == \"TX\") inference_pop <- cc %>%    filter(st == \"TX\") %>%    filter(charter == 1) %>%    filter(g_10_offered == \"Yes\") inference_pop ## # A tibble: 330 × 43 ##         ncessch sch_name    st    mstreet1 mcity phone website lea_name sch_type ##           <dbl> <chr>       <chr> <chr>    <chr> <chr> <chr>   <chr>       <int> ##  1 480000407173 POR VIDA A… TX    1135 MI… SAN … (210… \"http:… POR VID…        4 ##  2 480000409116 CORPUS CHR… TX    1135 MI… SAN … (361… \"http:… POR VID…        4 ##  3 480000409460 CESAR E CH… TX    3701 MU… CORP… (361… \"http:… POR VID…        4 ##  4 480001407174 GEORGE GER… TX    6944 SU… SAN … (210… \"\"      GEORGE …        4 ##  5 480001607239 DALLAS CAN… TX    4621 RO… DALL… (214… \"http:… TEXANS …        4 ##  6 480001607847 DALLAS CAN… TX    325 W 1… DALL… (214… \"http:… TEXANS …        4 ##  7 480001607910 HOUSTON CA… TX    325 W 1… DALL… (214… \"http:… TEXANS …        4 ##  8 480001608434 SAN ANTONI… TX    325 W 1… DALL… (210… \"http:… TEXANS …        4 ##  9 480001608908 FORT WORTH… TX    6220 WE… FORT… (817… \"http:… TEXANS …        4 ## 10 480001609028 FORT WORTH… TX    325 W 1… DALL… (817… \"http:… TEXANS …        4 ## # ℹ 320 more rows ## # ℹ 34 more variables: g_pk_offered <chr>, g_kg_offered <chr>, ## #   g_1_offered <chr>, g_2_offered <chr>, g_3_offered <chr>, g_4_offered <chr>, ## #   g_5_offered <chr>, g_6_offered <chr>, g_7_offered <chr>, g_8_offered <chr>, ## #   g_9_offered <chr>, g_10_offered <chr>, g_11_offered <chr>, ## #   g_12_offered <chr>, level <chr>, leaid <int>, charter <dbl>, ## #   titlei_status_text <chr>, magnet_text <chr>, nslp_status <chr>, …"},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"running-the-function","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Running the Function","title":"generalizeR Tutorial","text":"now ready run stratify() inference population. enter: greeted following:","code":"strat_output <- stratify(data = inference_pop)"},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"selecting-the-id-variable","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Selecting the ID Variable","title":"generalizeR Tutorial","text":"prompt requires us enter name ID variable wish use. enter name column contains unique NCES school IDs CCD database – ncessch.  receive message informing us stratify() converted character variables data frame factor variables. means factor variables large number levels original character versions many distinct observations. also told table displaying overview variables data frame printed Viewer pane. preview table shown . general, whenever table printed console, one printed Viewer pane well. Variable Overview","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"selecting-the-stratification-variables","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Selecting the Stratification Variables","title":"generalizeR Tutorial","text":"Next receive prompt asking us select stratification variables menu showing us variables available dataset. also given warning must select least two variables can’t choose factor variables containing 4 levels. restrictions put place prevent errors ensure stratification process goes smoothly. wish use factor variable 4 levels stratification, must first exit stratify() re-code desired factor levels variable indicator variables within data frame (package fastDummies may use). choosing covariates, must ensure use columns contain one value. case, use charter covariate, schools current dataset charter schools every value charter 1. Also must ensure use columns linearly dependent. example sum two columns column . stratify() give error either cases happens.  stratifying variables interest, chosen pct_female, pct_black_or_african_american, pct_free_and_reduced_lunch, total. enter: 29 32 38 42. function prints list variables names highlighted blue, well table displaying variable’s type number levels. done can look , confirm selected, make sure variables types expected. Since results seem reasonable, indicate correct entering 1.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"missing-observations","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Missing Observations","title":"generalizeR Tutorial","text":"now shown table (also available Viewer pane) breaks many missing observations variable contains, including id variable ncessch. observations dropped inference population stratification performed.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"descriptive-statistics","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Descriptive Statistics","title":"generalizeR Tutorial","text":"Next, function prints descriptive statistics stratification variables chosen, categorical continuous. case, variables continuous. Plots variables – histograms bar charts, appropriate – generated displayed one time.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"choosing-the-number-of-strata","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Choosing the Number of Strata","title":"generalizeR Tutorial","text":"Now ready choose number strata divide population. stratify() prints information, similar presented Generalizer Web application, explaining choice represents giving us guidance. choosing strata generally better terms generalizability, practical demand placed sampling process increases number strata, units must sampled stratum. Since planning using sample size 40 schools, ’ll try smaller number – 4 strata:  process stratifying can take time. function run silently, users might fear R frozen quit. sort progress bar, turned “verbose” mode clustering process, prints within-cluster sum squares iteration stratifying process converges:","code":""},{"path":[]},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"stratification-review","dir":"Articles","previous_headings":"Step 1: Stratify > Understanding the Results","what":"Stratification Review","title":"generalizeR Tutorial","text":"results begin brief review stratification process. informed stratification variables, observations dropped due missing data, population size (missing observations dropped), number strata, proportion variation population explained strata. case, proportion 66%. Increasing number strata increase percentage explained result homogeneous strata also require resources study implementation.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"covariate-statistics","dir":"Articles","previous_headings":"Step 1: Stratify > Understanding the Results","what":"Covariate Statistics","title":"generalizeR Tutorial","text":"stratify() provides us table within-stratum means standard deviations stratifying variables, well count total number units stratum.  similar table printed Viewer pane: Covariate Statistics Stratum","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"heat-map","dir":"Articles","previous_headings":"Step 1: Stratify > Understanding the Results","what":"Heat Map","title":"generalizeR Tutorial","text":"function also prints heat map:  column heat map corresponds stratum. can read map going columns, assessing stratum relation population. Remember goal sample independently within stratum order obtain sample representative population whole. end, stratum made homogeneous possible within (.e. within-stratum variances minimized) also maintaining much heterogeneity possible across strata (.e. -stratum variance maximized). Looking first column, see Stratum 2 contains 161 Texas charter high schools. schools : close population mean number students (430), population mean percentage students free reduced lunch (80%), close population mean percentage female students (50%), population mean percentage black students (10%). columns may interpreted exactly manner. (Users may wonder shade red bottom left bottom right cells differs seem mean 10%. scale variable, size population mean, rounding.) reading results, opportunity try different numbers strata, seen prompt .  wish try different strata, enter 1, seen image, enter number strata wish try. statistics printed different number strata. may try many different strata like. last strata saved strat_output object. case, stick four strata.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"summary-and-print","dir":"Articles","previous_headings":"Step 1: Stratify > Understanding the Results","what":"Summary and Print","title":"generalizeR Tutorial","text":"wish look results stratify() , can run following code: Note strat_output name assigned stratify_object example; users replace name chosen. also option print stratify_object. yields:  finished stratifying process!","code":"summary(strat_output)"},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"unguided","dir":"Articles","previous_headings":"Step 1: Stratify","what":"Unguided","title":"generalizeR Tutorial","text":"highly suggest use unguided version used guided version multiple times feel clear understanding function . want use guided version, uncertain argument supposed , please run ?stratify console, check reference page function.","code":""},{"path":[]},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"guided-1","dir":"Articles","previous_headings":"Step 2: Recruit","what":"Guided","title":"generalizeR Tutorial","text":"Now separated inference population 4 strata, next goal sample units stratum way overall sample representative entire population. can accomplish task using recruit() function. Like stratify(), recruit() guided default; can simply set guided = FALSE turn option choose, must specify values function arguments instead. Since assigned results stratify() object, object can passed directly recruit(), like : immediately greeted following welcome message:  pressing return key, see:  desired sample size 40 schools, enter ‘40’ number units wish recruit. function generates recruitment list stratum. row stratum’s recruitment list corresponds different unit stratum, units ranked ascending order Mahalanobis distances mean vector stratifying variables. idea units smallest Mahalanobis distances likely “representative” population chosen first part sample.  Next, function prints recruitment table tells us many units recruit stratum. arrives numbers multiplying sampling proportion (equal ratio stratum size total population size) stratum desired sample size, case 40. recruitment table looks like Viewer pane.  means recruitment plan recruit 20 schools Stratum 1, 4 Stratum 2, 5 Stratum 3, 11 Stratum 4. strata small (e.g. one two units), possible recruit choose zero units strata. happens, chosen strata likely ideal, go stratification process . function asks us want save recruitment lists csv files.  Upon entering ‘1’ indicate ‘Yes’, lists automatically saved working directory. also happens unguided function set save_as_csv = TRUE.  Lastly, function reminds us recruitment lists can also accessed output, provided stored object. can also see table showing strata number units recruited time running print(rec_output). finished recruitment process!","code":"rec_output <- recruit(strat_output)"},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"unguided-1","dir":"Articles","previous_headings":"Step 2: Recruit","what":"Unguided","title":"generalizeR Tutorial","text":"highly suggest use unguided version used guided version multiple times feel clear understanding function . want use guided version, uncertain argument supposed , please run ?recruit console check reference page recruit.","code":""},{"path":[]},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"guided-2","dir":"Articles","previous_headings":"Step 3: Assess","what":"Guided","title":"generalizeR Tutorial","text":"assess() function reports generalizability sample. generalizability index (0 1) global measure similarity sample population defined set covariates. can multiply 100 get percentage value: instance, generalizability index 0.8 means sample 80% similar population selected covariates. highly suggest running assess() beginning research studies can confident representative sample. rules thumb interpreting generalizability index: High: 1.00 ≥ B ≥ 0.90; High: 0.90 > B ≥ 0.80; Medium: 0.80 > B ≥ 0.50; Low: B < 0.50. Tipton (2014): “high” generalizability means experimental sample “like” random sample population interest. sample like population, however, reweighting can used estimate useful result sample “high” generalizability. means reweighted estimate PATE likely close conditionally unbiased (assuming ignorability condition met) sample sufficiently similar population reweighting result small increase standard errors. contrast, sample considered “medium” generalizability, reweighting possible, result coverage errors overlap problems, reweighted estimator contain bias /inflation standard errors large. means results may quite useful. Finally, “low” generalizability, sample population considered sufficiently different amount reweighting produce useful estimate average treatment effect population. cases, amount bias can removed small, /(though typically ) resulting standard errors large deem reweighted estimate “useless.” Tipton, E. (2014). Generalizable Experiment? Index Comparing Experimental Samples Populations. Journal Educational Behavioral Statistics, 39(6), 521–546. https://doi.org/10.3102/1076998614558486 using assess(), first must pick final sample based results recruit(). choosing sample, ready take results obtained stratify() recruit() use assess() generalizability sample data population. Unlike previous two functions, take output recruit plug directly assess(). Instead, assess() requires inference population dataset given stratify() beginning process, additional variable indicating whether unit sample. use stratify() recruit() functions pick sample, need give assess() dataset population chose sample , must include covariates sample indicator variable. Returning example, recall inference population consists Texas charter high schools. Therefore, assess() provide generalizability index shows extent results chosen sample generalize Texas charter high schools. like see sample may generalize data beyond inference population (e.g. charter schools across US), may include additional observations population dataset give assess() - just sure added units marked sample. can use recruitment lists stored rec_output number units per strata add sample variable inference_pop. list strata n can found running rec_output$recruitment_lists[[n]]. likely add sample variable manually time coordinate school, since example, pretend recruitment entirely successful. Now ready give data guided assess() function. First, receive welcome message prompted indicate binary variable encodes sample membership.  enter 44 indicate sample. see list variables, except sample missing, asked select covariations. must specify variables hope generalizable. variables first used stratify population. case, enter 30 33 39 43, variables used stratifying (different numbers stratify stratify() removes id variable ncessch).  entering information, asked two questions: first, sample data disjoint population, second, population data trimmed.  first question, data disjoint sample direct subset population. example, sample disjoint population sample included schools Texas, target population includes schools New Hampshire. Also, every unit sample must come population. untrue even one unit, data disjoint. example, sample exact subset population, disjoint population. second question relates well chosen sample represents population. Since nature research studies makes impossible simple random sample (SRS), invariably find units population unequal probabilities sample. Sometimes units population zero probability sample. results coverage error (Tipton, 2014), sample represents portion population. default, trim population. , final result assess() include number units trimmed population, generalizability index based portion population represented sample. solution coverage error. best route avoid choosing sample carefully methods used stratify() recruit(), assess() possible samples find coverage error early . answering questions, function ask method estimating generalizability index.  Logistic Regression default method. Unless specific technical reasons choosing two options, highly suggest stick default. , function ends providing generalizability index. can see index details print() generalizer object.  interpret generalizeR index, please refer information beginning assess() tutorial. run summary(assess_output), see following tables console Plots pane.   can also see nicer version covariate table running assess_output$covariate_kable.  summary reminds us covariates used, estimation method, much population trimmed, . also compares distribution propensity scores (logistic regression probabilities unit sample) units sample vs. population. trimmed units units population represented sample; case, units propensity scores less roughly -2.05. Additionally, provides comparison covariate. Ideally, like see ASMD < 0.25.","code":"sample_list <- c(rec_output$recruitment_lists[[1]]$ncessch[1:5],   rec_output$recruitment_lists[[2]]$ncessch[1:20],   rec_output$recruitment_lists[[3]]$ncessch[1:11],    rec_output$recruitment_lists[[4]]$ncessch[1:4])  inference_pop_sample <- inference_pop %>%    mutate(sample = if_else(ncessch %in% sample_list,                           1,                           0)) assess_output <- assess(inference_pop_sample)"},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"unguided-2","dir":"Articles","previous_headings":"Step 3: Assess","what":"Unguided","title":"generalizeR Tutorial","text":"highly suggest use unguided version used guided version multiple times feel clear understanding function . want use guided version, uncertain argument supposed , please run ?assess console check reference page.","code":""},{"path":"https://nustat.github.io/generalizeR/articles/generalizeR_tutorial.html","id":"step-4-weighting","dir":"Articles","previous_headings":"","what":"Step 4: Weighting","title":"generalizeR Tutorial","text":"main purpose function weight sample can provide unbiased estimate total average treatment effect (TATE). data disjoint, weighting method inverse odds; data disjoint, weighting method inverse probability. guided version function. Check function documentation see arguments weighting() takes - arguments assess() takes part. run weighting() inference_pop, created assess(). also option add outcome treatment_indicator variable, case, weighting also calculate weighted unweighted TATE. must include variables want weighted TATE. Note can include variables study finished. include outcome treatment variables, running summary(weighting_output) look like following.    can see, results similar results assess(), addition histogram describing distribution weights unit. include outcome treatment variables, also get following tables instead NULL values.  , can see weighted TATE larger unweighted TATE. confidence intervals overlap, conclude significant difference. can, however, confident weighted TATE less bias unweighted TATE. Lastly, can see nicer version covariate table running weighting_output$covariate_kable.","code":"selection_covariates <- c(\"total\", \"pct_black_or_african_american\", \"pct_white\", \"pct_female\", \"pct_free_and_reduced_lunch\") weighting_output <- weighting(inference_pop_sample, sample_indicator = \"sample\",covariates = selection_covariates, disjoint_data = F)"},{"path":"https://nustat.github.io/generalizeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicole Nixon. Author, maintainer. Tim Ruel. Author. Benjamin Ackerman. Author. Katie Coburn. Author. Beatrice Chao. Author. Beth Tipton. Author.","code":""},{"path":"https://nustat.github.io/generalizeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nixon N, Ruel T, Ackerman B, Coburn K, Chao B, Tipton B (2024). generalizeR: Design Sample Recruitment Plan Assess Generalizability Broader Populations. R package version 0.0.0.9000,  https://github.com/NUstat/generalizeR, https://nustat.github.io/generalizeR.","code":"@Manual{,   title = {generalizeR: Design a Sample Recruitment Plan and Assess its Generalizability to Broader Populations},   author = {Nicole Nixon and Tim Ruel and Benjamin Ackerman and Katie Coburn and Beatrice Chao and Beth Tipton},   year = {2024},   note = {R package version 0.0.0.9000,  https://github.com/NUstat/generalizeR},   url = {https://nustat.github.io/generalizeR}, }"},{"path":"https://nustat.github.io/generalizeR/index.html","id":"generalizer","dir":"","previous_headings":"","what":"Design a Sample Recruitment Plan and Assess its Generalizability to\n    Broader Populations","title":"Design a Sample Recruitment Plan and Assess its Generalizability to\n    Broader Populations","text":"goal generalizeR guide K-12 researchers process (1) designing sample recruitment plan generalization mind (2) reporting results study may (may ) generalize well.","code":""},{"path":"https://nustat.github.io/generalizeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Design a Sample Recruitment Plan and Assess its Generalizability to\n    Broader Populations","text":"can install development version GitHub : package yet available CRAN.","code":"# install.packages(\"devtools\") devtools::install_github(\"NUstat/generalizeR\")"},{"path":"https://nustat.github.io/generalizeR/reference/assess.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess Generalizability of Randomized Sample to Population — assess","title":"Assess Generalizability of Randomized Sample to Population — assess","text":"function, given stacked data frame containing sample population data, assesses generalizability sample population given covariates.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess Generalizability of Randomized Sample to Population — assess","text":"","code":"assess(   data,   guided = TRUE,   sample_indicator,   covariates,   estimation_method = \"lr\",   disjoint_data = TRUE,   trim_pop = FALSE )"},{"path":"https://nustat.github.io/generalizeR/reference/assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess Generalizability of Randomized Sample to Population — assess","text":"data data frame comprised \"stacked\" sample target population data guided logical. Default TRUE. FALSE, user must enter arguments function bypass guided mode sample_indicator variable name denoting sample membership (1 = sample, 0 = sample) covariates vector covariate names data set predict sample membership estimation_method method estimate probability sample membership (propensity scores). Default logistic regression (\"lr\"). methods supported Random Forests (\"rf\") Lasso (\"lasso\") disjoint_data logical. TRUE, sample population data considered disjoint. affects calculation weights - see details information. trim_pop logical. TRUE, population data subset exclude individuals covariates outside bounds sample covariates.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.factor.levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that checks whether any column in a dataset is a factor variable with more than a given number of levels — .check.factor.levels","title":"Internal function that checks whether any column in a dataset is a factor variable with more than a given number of levels — .check.factor.levels","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.factor.levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that checks whether any column in a dataset is a factor variable with more than a given number of levels — .check.factor.levels","text":"","code":".check.factor.levels(data, maxlevels = 4L)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.factor.levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that checks whether any column in a dataset is a factor variable with more than a given number of levels — .check.factor.levels","text":"data data.frame, dataframe factor variables interest maxlevels integer, maximum permissible number levels","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.factor.levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that checks whether any column in a dataset is a factor variable with more than a given number of levels — .check.factor.levels","text":"invalid_factors, list variable names permitted number levels","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.no.na.cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that checks whether a list provided is empty (avoiding conflict w/ check on >4 level factor categorical vars) — .check.no.na.cols","title":"Internal function that checks whether a list provided is empty (avoiding conflict w/ check on >4 level factor categorical vars) — .check.no.na.cols","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.no.na.cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that checks whether a list provided is empty (avoiding conflict w/ check on >4 level factor categorical vars) — .check.no.na.cols","text":"","code":".check.no.na.cols(na_col_list)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.no.na.cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that checks whether a list provided is empty (avoiding conflict w/ check on >4 level factor categorical vars) — .check.no.na.cols","text":"na_col_list list, list char corresponding dataframe columns rows NA","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-check.no.na.cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that checks whether a list provided is empty (avoiding conflict w/ check on >4 level factor categorical vars) — .check.no.na.cols","text":"logical, whether inputted list empty","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-generate.ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Sample Participation Probabilities — .generate.ps","title":"Generate Sample Participation Probabilities — .generate.ps","text":"function designed use within 'weighting()' 'assess()'.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-generate.ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Sample Participation Probabilities — .generate.ps","text":"","code":".generate.ps(data, sample_indicator, covariates, estimation_method)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-generate.ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Sample Participation Probabilities — .generate.ps","text":"data data frame comprised \"stacked\" sample target population data sample_indicator variable name denoting sample membership (1 = sample, 0 = sample) covariates vector covariate names data set predict sample membership estimation_method method estimate probability sample membership. Default logistic regression (\"lr\").methods supported Random Forests (\"rf\") Lasso (\"lasso\")","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-generate.ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Sample Participation Probabilities — .generate.ps","text":"sample participation probabilities unit data frame","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.covariate.bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Find covariate bounds in the sample data — .get.covariate.bounds","title":"Find covariate bounds in the sample data — .get.covariate.bounds","text":"Find covariate bounds sample data","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.covariate.bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find covariate bounds in the sample data — .get.covariate.bounds","text":"","code":".get.covariate.bounds(covariate, sample_indicator, data)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.covariate.bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find covariate bounds in the sample data — .get.covariate.bounds","text":"covariate covariate data set predicts sample membership sample_indicator variable denoting sample membership (1 = sample, 0 = sample) data data frame comprised \"stacked\" sample target population data","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.covariate.bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find covariate bounds in the sample data — .get.covariate.bounds","text":"covariate_bounds Returns dataframe","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Generalizability Index — .get.gen.index","title":"Calculate Generalizability Index — .get.gen.index","text":"function easiest use 'assess()' can also used independently.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Generalizability Index — .get.gen.index","text":"","code":".get.gen.index(sample_ps, pop_ps)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Generalizability Index — .get.gen.index","text":"sample_ps vector probabilities sample membership among individuals sample pop_ps vector probabilities sample membership among individuals population","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Generalizability Index — .get.gen.index","text":"generalizability index, value 0 1, higher score indicates greater similarity","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Generalizability Index — .get.gen.index","text":"calculates generalizability index, value 0 1, represents generalizable given sample given population specified covariates. information calculation interpretation, please see Tipton (2014).","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.gen.index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Generalizability Index — .get.gen.index","text":"Tipton, E. (2014). generalizable experiment? index comparing experimental samples populations. Journal Educational Behavioral Statistics, 39(6), 478-501.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.sample.size.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that asks user to specify sample size for guided version of recruit() and validates user-specified inputs — .get.sample.size","title":"Internal function that asks user to specify sample size for guided version of recruit() and validates user-specified inputs — .get.sample.size","text":"Intended called within recruit(), standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.sample.size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that asks user to specify sample size for guided version of recruit() and validates user-specified inputs — .get.sample.size","text":"","code":".get.sample.size(valid_inputs)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.sample.size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that asks user to specify sample size for guided version of recruit() and validates user-specified inputs — .get.sample.size","text":"valid_inputs vector, enumerates possible number units recruit, based population size","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-get.sample.size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that asks user to specify sample size for guided version of recruit() and validates user-specified inputs — .get.sample.size","text":"function returns list formatted recruitment results user interpretation: table results, corresponding kable, number units selected stratum","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.cont.data.tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that creates and formats a summary table of the continuous variables within the provided dataset — .make.cont.data.tbl","title":"Internal function that creates and formats a summary table of the continuous variables within the provided dataset — .make.cont.data.tbl","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.cont.data.tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that creates and formats a summary table of the continuous variables within the provided dataset — .make.cont.data.tbl","text":"","code":".make.cont.data.tbl(cont_data)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.cont.data.tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that creates and formats a summary table of the continuous variables within the provided dataset — .make.cont.data.tbl","text":"cont_data data.frame, dataframe continous variables","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.cont.data.tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that creates and formats a summary table of the continuous variables within the provided dataset — .make.cont.data.tbl","text":"function returns dataframe summary statistics inputted data","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.covariate.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Covariate Balance Table — .make.covariate.table","title":"Create Covariate Balance Table — .make.covariate.table","text":"function designed use within weighting() assess().'","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.covariate.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Covariate Balance Table — .make.covariate.table","text":"","code":".make.covariate.table(   data,   sample_indicator,   covariates,   sample_weights = NULL,   estimation_method = \"lr\",   disjoint_data = TRUE )"},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.covariate.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Covariate Balance Table — .make.covariate.table","text":"data Dataframe comprised \"stacked\" sample target population data sample_indicator Binary variable denoting sample membership (1 = sample, 0 = sample) covariates Vector covariates dataframe predict sample membership sample_weights Name column dataframe holding weights calculating weighted sample means covariates dataframe. NULL, sample means unweighted. estimation_method Method estimate probability sample membership. Default logistic regression (\"lr\"). methods supported Random Forests (\"rf\") Lasso (\"lasso\"). disjoint_data Logical. Defaults TRUE. TRUE, sample population data considered disjoint. affects calculation weights.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that performs the actual recruitment calculations for recruit() — .make.recruitment.lists","title":"Internal function that performs the actual recruitment calculations for recruit() — .make.recruitment.lists","text":"Intended called within recruit(), standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that performs the actual recruitment calculations for recruit() — .make.recruitment.lists","text":"","code":".make.recruitment.lists(stratify_output)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that performs the actual recruitment calculations for recruit() — .make.recruitment.lists","text":"stratify_output list class generalizeR_stratify","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that performs the actual recruitment calculations for recruit() — .make.recruitment.lists","text":"function returns list dataframes, corresponding recruitment list different stratum","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that formats a summary table of stata-based recruitment results for recruit() — .make.recruitment.table","title":"Internal function that formats a summary table of stata-based recruitment results for recruit() — .make.recruitment.table","text":"Intended called within recruit(), standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that formats a summary table of stata-based recruitment results for recruit() — .make.recruitment.table","text":"","code":".make.recruitment.table(stratify_output, sample_size)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that formats a summary table of stata-based recruitment results for recruit() — .make.recruitment.table","text":"stratify_output list class generalizeR_stratify sample_size integer, total sample size selected guide recruitment","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.recruitment.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that formats a summary table of stata-based recruitment results for recruit() — .make.recruitment.table","text":"function returns list formatted recruitment results user interpretation: table results, corresponding kable, number units selected stratum","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.var.overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that creates and formats a table of the variables in the dataset provided — .make.var.overview","title":"Internal function that creates and formats a table of the variables in the dataset provided — .make.var.overview","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.var.overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that creates and formats a table of the variables in the dataset provided — .make.var.overview","text":"","code":".make.var.overview(dataset, print_to_console = FALSE)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.var.overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that creates and formats a table of the variables in the dataset provided — .make.var.overview","text":"dataset data.frame, dataframe continous variables print_to_console logical, whether variable summary table printed console, defaults false","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-make.var.overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that creates and formats a table of the variables in the dataset provided — .make.var.overview","text":"None","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-n.strata.less.than.max.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that ensures that the number of strata requested does not exceed the maximum possible (maximum n-2 where n is number of observations w/ no missing variables of interest) — .n.strata.less.than.max","title":"Internal function that ensures that the number of strata requested does not exceed the maximum possible (maximum n-2 where n is number of observations w/ no missing variables of interest) — .n.strata.less.than.max","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-n.strata.less.than.max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that ensures that the number of strata requested does not exceed the maximum possible (maximum n-2 where n is number of observations w/ no missing variables of interest) — .n.strata.less.than.max","text":"","code":".n.strata.less.than.max(n_strata, data_interest, variables, idvar)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-n.strata.less.than.max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that ensures that the number of strata requested does not exceed the maximum possible (maximum n-2 where n is number of observations w/ no missing variables of interest) — .n.strata.less.than.max","text":"n_strata integer, number strata divide cluster population variables character, provide character vector names stratifying variables (population data frame) idvar character, provide character vector name ID variable (population data frame) data data.frame, data.frame object population interest (rows observations)","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-n.strata.less.than.max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that ensures that the number of strata requested does not exceed the maximum possible (maximum n-2 where n is number of observations w/ no missing variables of interest) — .n.strata.less.than.max","text":"function returns boolean value indicating whether number observations non-missing variables interests exceeds 1 plus number strata requested","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-round.preserve.sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function used in the calculations for creating recruitment lists, under .make.recruitment.lists(). Rounds number of observations to be recruited from each stratum to a whole number, while adjusting rounded results to preserve the total. — .round.preserve.sum","title":"Internal function used in the calculations for creating recruitment lists, under .make.recruitment.lists(). Rounds number of observations to be recruited from each stratum to a whole number, while adjusting rounded results to preserve the total. — .round.preserve.sum","text":"Intended called within recruit(), standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-round.preserve.sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function used in the calculations for creating recruitment lists, under .make.recruitment.lists(). Rounds number of observations to be recruited from each stratum to a whole number, while adjusting rounded results to preserve the total. — .round.preserve.sum","text":"","code":".round.preserve.sum(x, digits = 0)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-round.preserve.sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function used in the calculations for creating recruitment lists, under .make.recruitment.lists(). Rounds number of observations to be recruited from each stratum to a whole number, while adjusting rounded results to preserve the total. — .round.preserve.sum","text":"x list numeric values; enumerates possible number units recruit, based population size digits integer; signals number 0 digits place numeric x (e.g. digits = 2 multiply x 100)","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-round.preserve.sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function used in the calculations for creating recruitment lists, under .make.recruitment.lists(). Rounds number of observations to be recruited from each stratum to a whole number, while adjusting rounded results to preserve the total. — .round.preserve.sum","text":"function returns list integers, represent number observations sampled stratum","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","title":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","text":"Intended called within stratify_guided stratify_unguided, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","text":"","code":".stratify.calculate(data, n_strata, variables, idvar, verbose)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","text":"data data.frame object containing population data stratified (observations rows); must include unique id variable observation, well covariates. n_strata integer, number strata divide cluster population variables character, character vector names stratifying variables (population data frame) idvar character, haracter vector name ID variable (population data frame) verbose logical, defaults TRUE.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","text":"function returns list class \"generalizeR_stratify\" can provided input recruit(). information components list can found \"Details.\"","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.calculate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function that performs the actual stratification calculations for stratify() — .stratify.calculate","text":"list contains 14 components: idvar, variables, dataset, n_strata, solution, pop_data_by_stratum, summary_stats, data_omitted, cont_data_stats, cat_data_levels, heat_data, heat_data_simple, heat_data_kable, heat_plot.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.guided.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that provides the guided version of stratify(). Walks users through the provision and visualization of parameters needed to stratify observations, including id variables, covariates of interest, and the number of strata — .stratify.guided","title":"Internal function that provides the guided version of stratify(). Walks users through the provision and visualization of parameters needed to stratify observations, including id variables, covariates of interest, and the number of strata — .stratify.guided","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.guided.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that provides the guided version of stratify(). Walks users through the provision and visualization of parameters needed to stratify observations, including id variables, covariates of interest, and the number of strata — .stratify.guided","text":"","code":".stratify.guided(data, verbose)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.guided.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that provides the guided version of stratify(). Walks users through the provision and visualization of parameters needed to stratify observations, including id variables, covariates of interest, and the number of strata — .stratify.guided","text":"data data.frame object containing population data stratified (rows observations).","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.unguided.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","title":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","text":"Intended called within stratify, standalone function","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.unguided.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","text":"","code":".stratify.unguided(   data,   n_strata = NULL,   variables = NULL,   idvar = NULL,   verbose = TRUE )"},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.unguided.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","text":"data data.frame object containing population data stratified (rows observations). n_strata integer, number strata divide cluster population variables character, provide character vector names stratifying variables (population data frame) idvar character, provide character vector name ID variable (population data frame) verbose logical, defaults TRUE.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.unguided.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","text":"function returns list class \"generalizeR_stratify\" can provided input recruit(). information components list can found \"Details.\"","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-stratify.unguided.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function that provides the unguided version of stratify(). Given the dataset of interest, the number of strata, covriates of interest, and an id variable, performs stratification — .stratify.unguided","text":"list contains 14 components: idvar, variables, dataset, n_strata, solution, pop_data_by_stratum, summary_stats, data_omitted, cont_data_stats, cat_data_levels, heat_data, heat_data_simple, heat_data_kable, heat_plot.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-trim.pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Population so Population Covariates are within bounds of Sample Covariates — .trim.pop","title":"Subset Population so Population Covariates are within bounds of Sample Covariates — .trim.pop","text":"Subset Population Population Covariates within bounds Sample Covariates","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-trim.pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Population so Population Covariates are within bounds of Sample Covariates — .trim.pop","text":"","code":".trim.pop(data, sample_indicator, covariates)"},{"path":"https://nustat.github.io/generalizeR/reference/dot-trim.pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Population so Population Covariates are within bounds of Sample Covariates — .trim.pop","text":"data data frame comprised \"stacked\" sample target population data sample_indicator variable name denoting sample membership (1 = sample, 0 = sample) covariates vector covariate names data set predict sample membership","code":""},{"path":"https://nustat.github.io/generalizeR/reference/dot-trim.pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Population so Population Covariates are within bounds of Sample Covariates — .trim.pop","text":"trim_pop returns data frame, target population covariates exceed bounds sample covariates","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_assess.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"generalizeR_assess\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for generalizeR_assess print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"generalizeR_assess\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_recruit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"generalizeR_recruit\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_recruit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for generalizeR_recruit print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_recruit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"generalizeR_recruit\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_stratify.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"generalizeR_stratify\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_stratify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for generalizeR_stratify print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_stratify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"generalizeR_stratify\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"generalizeR_weighting\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for generalizeR_weighting print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.generalizeR_weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"generalizeR_weighting\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_assess.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"summary.generalizeR_assess\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for summary.generalizeR_assess print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"summary.generalizeR_assess\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_stratify.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"summary.generalizeR_stratify\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_stratify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for summary.generalizeR_stratify print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_stratify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"generalizeR_stratify\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for ","title":"Print method for ","text":"Print method \"summary.generalizeR_weighting\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for ","text":"","code":"# S3 method for summary.generalizeR_weighting print(x, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/print.summary.generalizeR_weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for ","text":"x object class \"summary.generalizeR_weighting\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":null,"dir":"Reference","previous_headings":"","what":"Recruit Units from a Population for Sampling — recruit","title":"Recruit Units from a Population for Sampling — recruit","text":"function works output 'stratify()'. user provides number units wish sample population dataset. function tells user many observations sample stratum generates recruitment lists, one per stratum, can either saved .csv files given directory accessed later .","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recruit Units from a Population for Sampling — recruit","text":"","code":"recruit(   stratify_output,   guided = TRUE,   sample_size = NULL,   save_as_csv = FALSE )"},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recruit Units from a Population for Sampling — recruit","text":"stratify_output output 'stratify()', S3 class 'generalizeR_stratify' guided logical; defaults TRUE. Whether function guided (ask questions behave interactively throughout) . set FALSE, must provide values arguments sample_size defaults NULL. guided set FALSE, must provide number units sample save_as_csv defaults NULL. guided set FALSE, specify whether save recruitment lists working directory; TRUE FALSE","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recruit Units from a Population for Sampling — recruit","text":"three-element list containing recruitment lists recruitment table/kable","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recruit Units from a Population for Sampling — recruit","text":"function, others package, designed mimic website https://www.thegeneralizer.org/ based papers referenced .","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Recruit Units from a Population for Sampling — recruit","text":"Tipton, E. (2014). Stratified sampling using cluster analysis: sample selection strategy improved generalizations experiments. Evaluation Review, 37(2), 109-139. Tipton, E. (2014). generalizable experiment? index comparing experimental samples populations. Journal Educational Behavioral Statistics, 39(6), 478-501.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/recruit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recruit Units from a Population for Sampling — recruit","text":"","code":"# \\donttest{ if (FALSE) { # Guided: recruit(ipeds_stratify_output_obj)  # Not guided: recruit(ipeds_stratify_output_obj, guided = FALSE, sample_size = 72, save_as_csv = TRUE) } # }"},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratify a Population Data Frame — stratify","title":"Stratify a Population Data Frame — stratify","text":"function stratify() takes input data frame observations (rows) wish stratify clusters. Typically, goal stratification developing sampling design maximizing generalizability. function, others package, designed mimic website https://www.thegeneralizer.org/.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratify a Population Data Frame — stratify","text":"","code":"stratify(   data = NULL,   guided = TRUE,   n_strata = NULL,   variables = NULL,   idvar = NULL,   verbose = TRUE )"},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratify a Population Data Frame — stratify","text":"data data.frame object containing population data stratified (observations rows); must include unique id variable observation, well covariates. guided logical, defaults TRUE. Whether function guided (ask questions behave interactively throughout) . set FALSE, user must provide values arguments n_strata integer, defaults NULL. guided set FALSE, must provide number strata divide cluster population variables character, defaults NULL. guided set FALSE, must provide character vector names stratifying variables (population data frame) idvar character, defaults NULL. guided set FALSE, must provide character vector name ID variable (population data frame) verbose logical, defaults TRUE.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratify a Population Data Frame — stratify","text":"function returns list class \"generalizeR_stratify\" can provided input recruit(). information components list can found \"Details.\"","code":""},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stratify a Population Data Frame — stratify","text":"list contains 14 components: idvar, variables, dataset, n_strata, solution, pop_data_by_stratum, summary_stats, data_omitted, cont_data_stats, cat_data_levels, heat_data, heat_data_simple, heat_data_kable, heat_plot. pop_data_by_stratum: tibble number rows equal number rows inference population (data) number columns equal number stratifying variables (dummy-coded applicable) plus ID column (idvar) column representing stratum membership, Stratum","code":""},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stratify a Population Data Frame — stratify","text":"Tipton, E. (2014). Stratified sampling using cluster analysis: sample selection strategy improved generalizations experiments. Evaluation Review, 37(2), 109-139. Tipton, E. (2014). generalizable experiment? index comparing experimental samples populations. Journal Educational Behavioral Statistics, 39(6), 478-501.","code":""},{"path":"https://nustat.github.io/generalizeR/reference/stratify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratify a Population Data Frame — stratify","text":"","code":"# \\donttest{ if (FALSE) { # To get sample data; must first be installed using # devtools::install_github(\"NUstat/generalizeRdata\") library(generalizeRdata)  # Guided: stratify(ipeds)  # Not guided: stratify(ipeds, guided = FALSE, n_strata = 4,          variables = c(\"pct_female\", \"pct_white\"), idvar= \"unitid\") } # }"},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_assess.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for ","title":"Summary method for ","text":"Summary method \"generalizeR_assess\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for ","text":"","code":"# S3 method for generalizeR_assess summary(object, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for ","text":"object object class \"generalizeR_assess\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_stratify.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for ","title":"Summary method for ","text":"Summary method \"generalizeR_stratify\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_stratify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for ","text":"","code":"# S3 method for generalizeR_stratify summary(object, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_stratify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for ","text":"object object class \"generalizeR_stratify\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for ","title":"Summary method for ","text":"Summary method \"generalizeR_weighting\" class","code":""},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for ","text":"","code":"# S3 method for generalizeR_weighting summary(object, ...)"},{"path":"https://nustat.github.io/generalizeR/reference/summary.generalizeR_weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for ","text":"object object class \"generalizeR_weighting\" ... arguments passed methods","code":""},{"path":"https://nustat.github.io/generalizeR/reference/weighting.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Weights for Generalizing Average Treatment Effect — weighting","title":"Estimate Weights for Generalizing Average Treatment Effect — weighting","text":"Estimate Weights Generalizing Average Treatment Effect","code":""},{"path":"https://nustat.github.io/generalizeR/reference/weighting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Weights for Generalizing Average Treatment Effect — weighting","text":"","code":"weighting(   data,   sample_indicator,   treatment_indicator = NULL,   outcome = NULL,   covariates,   estimation_method = \"lr\",   disjoint_data = TRUE )"},{"path":"https://nustat.github.io/generalizeR/reference/weighting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Weights for Generalizing Average Treatment Effect — weighting","text":"data data frame comprised \"stacked\" sample target population data sample_indicator variable name denoting binary sample membership (1 = sample, 0 = sample) treatment_indicator variable name denoting binary treatment assignment (ok available sample, population) outcome variable name denoting outcome covariates vector covariate names data set predict sample membership estimation_method method estimate probability sample membership (propensity scores). Default logistic regression (\"lr\").methods supported Random Forests (\"rf\") Lasso (\"lasso\") disjoint_data logical. TRUE, sample population data considered disjoint. affects calculation weights - see details information.","code":""}]
